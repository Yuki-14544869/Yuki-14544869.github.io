{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":1,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/Img/AppSo.bmp","path":"Img/AppSo.bmp","modified":1,"renderable":0},{"_id":"source/Img/alipay.png","path":"Img/alipay.png","modified":1,"renderable":0},{"_id":"source/Img/wechatpay.png","path":"Img/wechatpay.png","modified":1,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"source/Img/2017/08/13/2017-08-13_23-42.png","path":"Img/2017/08/13/2017-08-13_23-42.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/12/2017-8-12_22-07-night blue.png","path":"Img/2017/08/12/2017-8-12_22-07-night blue.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/12/2017-8-12_22-07-night eighties.png","path":"Img/2017/08/12/2017-8-12_22-07-night eighties.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/12/2017-8-12_22-07-night bright.png","path":"Img/2017/08/12/2017-8-12_22-07-night bright.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/12/2017-8-12_22-07-normal.png","path":"Img/2017/08/12/2017-8-12_22-07-normal.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/12/2017-8-12_22-07-night.png","path":"Img/2017/08/12/2017-8-12_22-07-night.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_17-34.png","path":"Img/2017/08/10/2017-08-10_17-34.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_17-36.png","path":"Img/2017/08/10/2017-08-10_17-36.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_19-57.jpg","path":"Img/2017/08/10/2017-08-10_19-57.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_19-58.jpg","path":"Img/2017/08/10/2017-08-10_19-58.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_20-04.png","path":"Img/2017/08/10/2017-08-10_20-04.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_20-05.jpg","path":"Img/2017/08/10/2017-08-10_20-05.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_20-07.jpg","path":"Img/2017/08/10/2017-08-10_20-07.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_21-53.jpg","path":"Img/2017/08/10/2017-08-10_21-53.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_21-51.jpg","path":"Img/2017/08/10/2017-08-10_21-51.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_22-21.jpg","path":"Img/2017/08/10/2017-08-10_22-21.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/17/2017-08-17_11-20.jpg","path":"Img/2017/08/17/2017-08-17_11-20.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/16/2017-08-16_19-30.png","path":"Img/2017/08/16/2017-08-16_19-30.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/17/2017-08-17_11-22.jpg","path":"Img/2017/08/17/2017-08-17_11-22.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/17/2017-08-17_11-24.jpg","path":"Img/2017/08/17/2017-08-17_11-24.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/21/20170821213450.png","path":"Img/2017/08/21/20170821213450.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/24/20170824155059.jpg","path":"Img/2017/08/24/20170824155059.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bVYCn7V77.png","path":"Img/2017/08/22/005VELIygy72bVYCn7V77.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bVbRvLMb6.png","path":"Img/2017/08/22/005VELIygy72bVbRvLMb6.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bWMUKWq9e.png","path":"Img/2017/08/22/005VELIygy72bWMUKWq9e.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bWVT3Vy54.jpg","path":"Img/2017/08/22/005VELIygy72bWVT3Vy54.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bWqnp3Gb0.png","path":"Img/2017/08/22/005VELIygy72bWqnp3Gb0.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bWjrZswb4.png","path":"Img/2017/08/22/005VELIygy72bWjrZswb4.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bX5gdUn0b.jpg","path":"Img/2017/08/22/005VELIygy72bX5gdUn0b.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bWapp9K18.png","path":"Img/2017/08/22/005VELIygy72bWapp9K18.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bXCBtSe2e.jpg","path":"Img/2017/08/22/005VELIygy72bXCBtSe2e.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bXRyn6i82.jpg","path":"Img/2017/08/22/005VELIygy72bXRyn6i82.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bXYrMjsbe.png","path":"Img/2017/08/22/005VELIygy72bXYrMjsbe.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bXmEdje5c.jpg","path":"Img/2017/08/22/005VELIygy72bXmEdje5c.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bXy1AnVd3.png","path":"Img/2017/08/22/005VELIygy72bXy1AnVd3.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bXuaSZOc0.jpg","path":"Img/2017/08/22/005VELIygy72bXuaSZOc0.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bYArRxCa0.png","path":"Img/2017/08/22/005VELIygy72bYArRxCa0.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bYYyi2cc0.jpg","path":"Img/2017/08/22/005VELIygy72bYYyi2cc0.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bYMYMAN09.png","path":"Img/2017/08/22/005VELIygy72bYMYMAN09.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/005VELIygy72bYiPHYK2a.png","path":"Img/2017/08/22/005VELIygy72bYiPHYK2a.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/22/微信截图_20170822163925.png","path":"Img/2017/08/22/微信截图_20170822163925.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"source/Img/2017/08/10/2017-08-10_17-42.png","path":"Img/2017/08/10/2017-08-10_17-42.png","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_19-54.jpg","path":"Img/2017/08/10/2017-08-10_19-54.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_19-56.jpg","path":"Img/2017/08/10/2017-08-10_19-56.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/10/2017-08-10_20-17.jpg","path":"Img/2017/08/10/2017-08-10_20-17.jpg","modified":1,"renderable":0},{"_id":"source/Img/2017/08/16/2017-08-16_19-53.png","path":"Img/2017/08/16/2017-08-16_19-53.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"source/Img/2017/08/16/2017-08-16_20-02.png","path":"Img/2017/08/16/2017-08-16_20-02.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"source/Img/2017/08/17/2017-08-17_11-32.jpg","path":"Img/2017/08/17/2017-08-17_11-32.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515036736598},{"_id":"source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1515036736019},{"_id":"source/CNAME","hash":"fd048bc5b3da3f9369c6c1b83419809c7a573c49","modified":1515036736019},{"_id":"source/favicon.ico","hash":"85154a07fb528ea97b2affbaac2fc04f7a0d090b","modified":1515036736897},{"_id":"source/robots.txt","hash":"7db4ceab26512c7757059043283c2d6188f9d77b","modified":1515139811074},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1515036736898},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1515036736898},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1515036736898},{"_id":"themes/next/.gitignore","hash":"b935cc0e5b099ebd343ca1766e02f65138c13dd0","modified":1515036737135},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1515036737136},{"_id":"themes/next/.javascript_ignore","hash":"cd250ad74ca22bd2c054476456a73d9687f05f87","modified":1515036737137},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1515036737141},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1515036737139},{"_id":"themes/next/.travis.yml","hash":"ee90f9452591ebba1b9cfba2543281109d3afdce","modified":1515036737142},{"_id":"themes/next/LICENSE","hash":"ec44503d7e617144909e54533754f0147845f0c5","modified":1515036737143},{"_id":"themes/next/README.en.md","hash":"fd7a00ae9026fb4f87dd7eed9ce049d0db447140","modified":1515036737145},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1515036737146},{"_id":"themes/next/bower.json","hash":"63c38f50fb54b25bf5101f566189f9e5b3a6ef0e","modified":1515036737149},{"_id":"themes/next/_config.yml","hash":"5d7284d770af4a7d493b85e55c56b22847f88bfa","modified":1515036737148},{"_id":"themes/next/gulpfile.coffee","hash":"412defab3d93d404b7c26aaa0279e2e586e97454","modified":1515036737151},{"_id":"themes/next/package.json","hash":"85a77bafb3d1e958b82e52528b7a95fcd59efda9","modified":1515036738908},{"_id":"source/Img/AppSo.bmp","hash":"14e701b3cb8904c38f65b2301638bffcc8a7da52","modified":1515036736597},{"_id":"source/Img/alipay.png","hash":"13cea99a746b3b5f2ccefb687da30c2e98e24004","modified":1515036736598},{"_id":"source/Img/wechatpay.png","hash":"c364b2d416df76ef952ff35fd1c664a68cc6315b","modified":1515036736598},{"_id":"source/_drafts/hexo小插件的部署.md","hash":"e503da3c17b14486568b94ff65d0073b118c0bf0","modified":1515036736717},{"_id":"source/_drafts/hexo自定义页面样式.md","hash":"55140f0b007c0c914b378970556925bd7a9120a1","modified":1515036736718},{"_id":"source/_posts/ACM-竞赛小技巧.md","hash":"4d4cd6e9a72a8bf9e1e8ce4a81cc08bc4df3e283","modified":1515057206397},{"_id":"source/_posts/C-STL总结.md","hash":"bda72a4dcce2af8b8f45332fbc5f583a69309d0e","modified":1515057838342},{"_id":"source/_posts/Centos7-卸载-OpenJDK.md","hash":"e6ac0dafabfcbf7ee222e76a03b0aa5ef541fac2","modified":1515138717848},{"_id":"source/_posts/Windows-下利用-Cygwin-搭建-C-C-开发环境.md","hash":"a6fb1616bdc991fec6b2055ba3bbcc471d8662fa","modified":1515036736722},{"_id":"source/_posts/hexo 主题配置以及小插件的部署.md","hash":"2d7bfb13582f7c31b92d0c7c6ba607717d145524","modified":1515058637326},{"_id":"source/_posts/hexo 写博客的小技巧.md","hash":"3903e7369799c726f7185f2fbc6f82f6a4a9f346","modified":1515057170327},{"_id":"source/_posts/hihoCoder-1000-A-B.md","hash":"a6578d28204242f13ebf09dabd7a18eb861b7e62","modified":1515058749394},{"_id":"source/_posts/hexo-博客多机更新.md","hash":"afabd07939dc96b966e40986251a77fd85c1b981","modified":1515054211254},{"_id":"source/_posts/hihoCoder-1039、字符消除.md","hash":"40663f426ce614877491a08ef342cda851a4e997","modified":1515058841546},{"_id":"source/_posts/hihoCoder-1040、矩形判断.md","hash":"b5b4b84a102bb7a3307c968ac59e58b3123b3c7a","modified":1515036736821},{"_id":"source/_posts/hihoCoder-1323-回文字符串.md","hash":"85afc105f7c551b24a9fca6ebce218ce7e1b9569","modified":1515036736821},{"_id":"source/_posts/hihoCoder-1326-有序01字符串.md","hash":"8ee192db7662d07c16bd246043413b288e67277b","modified":1515036736822},{"_id":"source/_posts/hihoCoder-1324-希尔伯特曲线.md","hash":"2b9c0b0f7c360442321444470a064c44d63eaf26","modified":1515036736822},{"_id":"source/_posts/hihoCoder-1327、分隔相同字符.md","hash":"15d5ee7a58f42c9d622d52b4aa4623f4b09a7c56","modified":1515036736822},{"_id":"source/_posts/hihoCoder-1328、逃离迷宫.md","hash":"76bb6292e06c87baee3cb7e9f141a9ed479b35c2","modified":1515036736823},{"_id":"source/_posts/hihoCoder-1330、数组重排.md","hash":"36d3b4d25da8fb719bb148c603ec74a1d8c42f90","modified":1515036736823},{"_id":"source/_posts/hihoCoder-1356、分隔相同整数.md","hash":"377efad34a7f0579207f4173aa55d3e92e87f82b","modified":1515036736823},{"_id":"source/_posts/hihoCoder-1519、逃离迷宫II.md","hash":"90ed336c7ac2e8ee86d73cc997fa0e3b324a3c9a","modified":1515036736824},{"_id":"source/_posts/为何程序员喜欢将INF设置为0x3f3f3f3f？.md","hash":"93ee44498a823ea2e2c0450c898410f83c0c22d3","modified":1515036736896},{"_id":"source/_posts/hihoCoder-1523、数组重排2.md","hash":"8806b459b644ea0913215cbc49d35c09423b9d74","modified":1515036736895},{"_id":"source/_posts/提取-Windows-10-锁屏壁纸.md","hash":"084a612f69afa4e4684ffb4e7eef92ade483bbae","modified":1515036736896},{"_id":"source/_posts/使用 hexo-github 搭建我的个人博客.md","hash":"55201a5b5af9e9721f151d031343ef473c7138ba","modified":1515036736896},{"_id":"source/tags/index.md","hash":"8997cf08e9c563c247a09833dd51473bb53454f5","modified":1515036736897},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5adfad3ef1b870063e621bc0838268eb2c7c697a","modified":1515036737003},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"3178cadcec94bfad651bdf320d83946b4e0ac932","modified":1515036737005},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"55091b1aab0b472d3f3e239c8d93306c751e4c1c","modified":1515036737133},{"_id":"themes/next/languages/de.yml","hash":"4be3e7d296d5592e0d111dfa6cbbff02602c972d","modified":1515036737153},{"_id":"themes/next/languages/default.yml","hash":"d912814caac150da1611c96843371a87714e52f9","modified":1515036737154},{"_id":"themes/next/languages/en.yml","hash":"b3ee45143bc014578db6b8ac0573f7c7b143a743","modified":1515036737156},{"_id":"themes/next/languages/fr-FR.yml","hash":"0d5bd8bbbeafb72506124ed35e7509debc753612","modified":1515036737157},{"_id":"themes/next/languages/ja.yml","hash":"1a608dc799c0f9c36b626bac6fe3404acb45b86d","modified":1515036737266},{"_id":"themes/next/languages/id.yml","hash":"c0848e93bf33a1333ff232905b6b392b1e056dd1","modified":1515036737159},{"_id":"themes/next/languages/ko.yml","hash":"5c811514aef401317a9ec38b95679d6d2ef0ad42","modified":1515036737266},{"_id":"themes/next/languages/pt-BR.yml","hash":"cc8b5a67ec87b0d5aec6e253bab67ec3cfe3069c","modified":1515036737266},{"_id":"themes/next/languages/pt.yml","hash":"943475a7d681f37ede579cd62da9c50568ca0f8d","modified":1515036737267},{"_id":"themes/next/languages/ru.yml","hash":"84d41a111e497236b2c1fa16e9b91668a1f37037","modified":1515036737267},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3111ce4cc5f30868b3628f9f805d2aef3b75d1c1","modified":1515036737267},{"_id":"themes/next/languages/zh-hk.yml","hash":"b58c0d85daa4d62b0c9753a59de0739aa0120735","modified":1515036737268},{"_id":"themes/next/languages/zh-tw.yml","hash":"8ce0a32411de111ae39d08e4bc936767dacdeb08","modified":1515036737268},{"_id":"themes/next/layout/_layout.swig","hash":"a6572e0ec12a014938a9a6bb2896a38abd443838","modified":1515036737269},{"_id":"themes/next/layout/archive.swig","hash":"c2be7c95af6205c7501a261f2fc9702c57107f89","modified":1515036738905},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1515036738906},{"_id":"themes/next/layout/index.swig","hash":"4bf29f44ca9519a005671f2f2a79a48a148b435b","modified":1515036738906},{"_id":"themes/next/layout/page.swig","hash":"dbff0302b4bfabb51556a197bf65190eb30361f0","modified":1515036738906},{"_id":"themes/next/layout/post.swig","hash":"182a99b1f6db0350106c6bb480fede0bbdb7e40f","modified":1515036738907},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1515036738907},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1515036738908},{"_id":"themes/next/scripts/merge-configs.js","hash":"3ce1be32bb77ee19da25e8dae7dc04e2afc46ca1","modified":1515036738909},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1515036738909},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1515036741965},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1515036741965},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1515036741966},{"_id":"themes/next/source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1515036739036},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515036740571},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1515036737268},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1515036737269},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1515036737269},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"0f59a51b5cea3e8a7c078db486626cddc2978622","modified":1515036737270},{"_id":"themes/next/layout/_macro/post.swig","hash":"63f37f63a8be14b34097878f0ad6d6dd10175b21","modified":1515036737270},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"f10ca698e8ea0c31ff72a6cffa832c3cd703a133","modified":1515036737383},{"_id":"themes/next/layout/_macro/reward.swig","hash":"5b1e91c2f6f88fbecd426cd0727e7b7854c6cc1d","modified":1515036737382},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1515036737383},{"_id":"themes/next/layout/_partials/comments.swig","hash":"7a229b569743555215a4f2561997ad496d81e938","modified":1515036737383},{"_id":"themes/next/layout/_partials/footer.swig","hash":"504dbbeac4fd915ea46c42538b94663de0cc8a4f","modified":1515036737384},{"_id":"themes/next/layout/_partials/head.swig","hash":"476e6c2452732c2741f518004d336bc348e710d7","modified":1515036737631},{"_id":"themes/next/layout/_partials/header.swig","hash":"d6bf1d1554d91eaf1bfc40ba8905ae81673e5f45","modified":1515036737632},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1515036737633},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1515036737633},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1515036737633},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1515036738593},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1515036738593},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"53c894e6f3573c662dc4e4f7b5a6f1a32f1a8c94","modified":1515036738603},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1515036738805},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1515036738806},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1515036738805},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1515036738807},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1515036738807},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1515036738808},{"_id":"themes/next/scripts/tags/button.js","hash":"aaf71be6b483fca7a65cd6296c2cf1c2271c26a6","modified":1515036738910},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1515036738911},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1515036738911},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1515036738911},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1515036739034},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1515036739034},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1515036739034},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1515036739035},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1515036739035},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1515036740571},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1515036740572},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1515036740572},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1515036740573},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1515036740630},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1515036740630},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1515036740630},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1515036740631},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1515036740631},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1515036740632},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515036740632},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1515036740632},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1515036740632},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1515036740633},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1515036740633},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515036738596},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515036738596},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515036740056},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515036740056},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515036740061},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515036740350},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1515036740467},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1515036737632},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1515036737632},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1515036737634},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1515036737634},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1515036737634},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1515036737635},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1515036737635},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"8ed117eeeac17d562a54ec6be556988be0ec67ba","modified":1515036738591},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1515036737635},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1515036738595},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1515036738596},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1515036738598},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1515036738604},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1515036738605},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1515036738609},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1515036738608},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1515036738610},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1515036738610},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1515036738611},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1515036738613},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1515036738612},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1515036738613},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1515036738614},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1515036738615},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1515036738615},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1515036738616},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1515036738617},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1515036738712},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"be2aaeb8f05979e2ba501248480d5294256d61f2","modified":1515036738712},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1515036738713},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1515036738713},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1515036738810},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1515036738811},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1515036738904},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1515036738905},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"5b481369c3770d0cafcf9208692c295423456c1f","modified":1515036740054},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1515036740055},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"bf009e85212749405c27d89b49f401911355ecc7","modified":1515036740060},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"0e55cbd93852dc3f8ccb44df74d35d9918f847e0","modified":1515036740061},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"2a4e844dec690365774c2f6e8984706fee39ea63","modified":1515036740350},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1515036740350},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"89f88b9c9a191dd980f799fc36b83b63290d3ac9","modified":1515036740466},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a627633d3bb70b8501572b18037def478beb7017","modified":1515036740467},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1515036740633},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"cb431b54ba9c692165a1f5a12e4c564a560f8058","modified":1515036740634},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"96c8b5fe1999de1b3a46730d9812787dfcd65884","modified":1515036740634},{"_id":"themes/next/source/js/src/exturl.js","hash":"a2a0f0de07e46211f74942a468f42ee270aa555c","modified":1515036740634},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1515036740758},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"1512c751d219577d338ac0780fb2bbd9075d5298","modified":1515036740759},{"_id":"themes/next/source/js/src/motion.js","hash":"dda8c76fce91d7f140c06de2583ba806810f12c2","modified":1515036740761},{"_id":"themes/next/source/js/src/post-details.js","hash":"50fa390554f0fb467d8eb84ac8eff2cffb13fe67","modified":1515036740762},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"02cf91514e41200bc9df5d8bdbeb58575ec06074","modified":1515036740765},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1515036740766},{"_id":"themes/next/source/js/src/utils.js","hash":"f90c7611dc665b5e321cb81c0bd689445bab438a","modified":1515036740767},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1515036740897},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1515036740900},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"82fee688910efc644d3d1c3305c6ae28ba3f38f9","modified":1515036740982},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1515036741076},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1515036741076},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1515036741077},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1515036741137},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1515036741139},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1515036741139},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1515036741306},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1515036741307},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1515036741307},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1515036741490},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1515036741495},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1515036741496},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1515036741497},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1515036741622},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1515036741624},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1515036741626},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1515036741628},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1515036741740},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1515036741740},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1515036741629},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1515036741742},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1515036741743},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1515036741744},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1515036741746},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1515036741745},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1515036741747},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1515036741747},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"8aaa675f577d5501f5f22d5ccb07c2b76310b690","modified":1515036741750},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1515036741749},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1515036741748},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"2d9a9f38c493fdf7c0b833bb9184b6a1645c11b2","modified":1515036741752},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"46a50b91c98b639c9a2b9265c5a1e66a5c656881","modified":1515036741753},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"8148492dd49aa876d32bb7d5b728d3f5bf6f5074","modified":1515036741754},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1515036741882},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1515036741881},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1515036741963},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1515036741963},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1515036741964},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1515036741494},{"_id":"source/Img/2017/08/13/2017-08-13_23-42.png","hash":"057968f93321ce1d3aa1af3ce03a0090081a3157","modified":1515036736275},{"_id":"source/Img/2017/08/12/2017-8-12_22-07-night blue.png","hash":"9f4c07c926e71b2c3f0c040f39e366c44630ae95","modified":1515036736132},{"_id":"source/Img/2017/08/12/2017-8-12_22-07-night eighties.png","hash":"6840cc406e7c92fac00112f876b7de12207c09cc","modified":1515036736274},{"_id":"source/Img/2017/08/12/2017-8-12_22-07-night bright.png","hash":"21a21d8e4e19f2ed53dfccef6287fdfea8754521","modified":1515036736133},{"_id":"source/Img/2017/08/12/2017-8-12_22-07-normal.png","hash":"76db70636ca7ddad3d8a16b3d0c1d8c2aa41f124","modified":1515036736275},{"_id":"source/Img/2017/08/12/2017-8-12_22-07-night.png","hash":"9f4c07c926e71b2c3f0c040f39e366c44630ae95","modified":1515036736275},{"_id":"source/Img/2017/08/10/2017-08-10_17-34.png","hash":"5c4cce7b7515f8705e5d35a139799e77caf3b3c9","modified":1515036736020},{"_id":"source/Img/2017/08/10/2017-08-10_17-36.png","hash":"d3e647942090a821b17dc30eee43e07992d67dad","modified":1515036736021},{"_id":"source/Img/2017/08/10/2017-08-10_19-57.jpg","hash":"eeb8d1748bd8c0f6c585260a3f0eae4a0aa04ceb","modified":1515036736122},{"_id":"source/Img/2017/08/10/2017-08-10_19-58.jpg","hash":"9ecaa128c1ff1b7b0ea4b0c01370afe75f47c03a","modified":1515036736124},{"_id":"source/Img/2017/08/10/2017-08-10_20-04.png","hash":"323cb67f24f10208ab9aa43bde54adf2535177cf","modified":1515036736125},{"_id":"source/Img/2017/08/10/2017-08-10_20-05.jpg","hash":"3907c3e74d6269fa542d20ce64aab1b594601b2e","modified":1515036736126},{"_id":"source/Img/2017/08/10/2017-08-10_20-07.jpg","hash":"cad8419013cdcfa477c1ca522303563a8df70125","modified":1515036736127},{"_id":"source/Img/2017/08/10/2017-08-10_21-53.jpg","hash":"c9ac1bed187ffec85f0553467141d6f8cd5ccffb","modified":1515036736131},{"_id":"source/Img/2017/08/10/2017-08-10_21-51.jpg","hash":"08f110276e7ad891dbf38ee6f308db65b2f1da77","modified":1515036736130},{"_id":"source/Img/2017/08/10/2017-08-10_22-21.jpg","hash":"acc2d0c0d690f4d5763d2792628287bf52a1ed82","modified":1515036736131},{"_id":"source/Img/2017/08/17/2017-08-17_11-20.jpg","hash":"8344e0ca42df3e0f273f07792667d2a1d3e65305","modified":1515036736375},{"_id":"source/Img/2017/08/16/2017-08-16_19-30.png","hash":"5fa814eb865551de937cec1cd5e0472b1f287e4c","modified":1515036736276},{"_id":"source/Img/2017/08/17/2017-08-17_11-22.jpg","hash":"eb1026829a652dfacd962a312a33d489bdef6130","modified":1515036736377},{"_id":"source/Img/2017/08/17/2017-08-17_11-24.jpg","hash":"a8853932c8dac61966cc832f973bbdd15fb6b58f","modified":1515036736443},{"_id":"source/Img/2017/08/21/20170821213450.png","hash":"20298b7dbbc9e362ae1d55f279f6a293e0779bde","modified":1515036736450},{"_id":"source/Img/2017/08/24/20170824155059.jpg","hash":"f5b351f9ba0a1df9c528080d48300e99109bcb25","modified":1515036736596},{"_id":"source/Img/2017/08/22/005VELIygy72bVYCn7V77.png","hash":"d730bc3e0f6a474845403b84bb197727c7ddde9d","modified":1515036736451},{"_id":"source/Img/2017/08/22/005VELIygy72bVbRvLMb6.png","hash":"dcb5fb6374f326bfa2e2b882555d8c8b1ed4ed9c","modified":1515036736451},{"_id":"source/Img/2017/08/22/005VELIygy72bWMUKWq9e.png","hash":"9bae3fa075c97bff3fee5e9a3f97e0bc45cbda68","modified":1515036736478},{"_id":"source/Img/2017/08/22/005VELIygy72bWVT3Vy54.jpg","hash":"b83d691980cf6fb30860b0330871cfa1a59b0f4c","modified":1515036736478},{"_id":"source/Img/2017/08/22/005VELIygy72bWqnp3Gb0.png","hash":"e024b2d670bbcfc098998ffa12465ac63749181f","modified":1515036736480},{"_id":"source/Img/2017/08/22/005VELIygy72bWjrZswb4.png","hash":"b7c5ced915c617ed2329bb9adb73de3062b651b8","modified":1515036736479},{"_id":"source/Img/2017/08/22/005VELIygy72bX5gdUn0b.jpg","hash":"f03312bdcd0d80f33f4b0e3935ddbdaa129b8670","modified":1515036736481},{"_id":"source/Img/2017/08/22/005VELIygy72bWapp9K18.png","hash":"ceab8cdbcb03b41986b6c0f20684eea3937e203b","modified":1515036736479},{"_id":"source/Img/2017/08/22/005VELIygy72bXCBtSe2e.jpg","hash":"2e922b7f025faf33a0cdd0dcfc3f802e835fdad4","modified":1515036736481},{"_id":"source/Img/2017/08/22/005VELIygy72bXRyn6i82.jpg","hash":"5fefc74814f10e3f4f5e7f322872fb1e1aa017ab","modified":1515036736482},{"_id":"source/Img/2017/08/22/005VELIygy72bXYrMjsbe.png","hash":"bf83e511f88f73471dd961a0f5df8e90ca569384","modified":1515036736482},{"_id":"source/Img/2017/08/22/005VELIygy72bXmEdje5c.jpg","hash":"4b2e48211f09be119e0b85ab002e92842d69f42b","modified":1515036736483},{"_id":"source/Img/2017/08/22/005VELIygy72bXy1AnVd3.png","hash":"a5c9ab1fc84b940bddd4211a6a4df892867e2f20","modified":1515036736484},{"_id":"source/Img/2017/08/22/005VELIygy72bXuaSZOc0.jpg","hash":"fd02809de9d3795bea8433fe10e58376da59e252","modified":1515036736484},{"_id":"source/Img/2017/08/22/005VELIygy72bYArRxCa0.png","hash":"5d9acef3a9a62270e394825d571cef7658046875","modified":1515036736484},{"_id":"source/Img/2017/08/22/005VELIygy72bYYyi2cc0.jpg","hash":"28466740c3e5b2fe17f534aa94cb58a0a46a71e0","modified":1515036736531},{"_id":"source/Img/2017/08/22/005VELIygy72bYMYMAN09.png","hash":"4371bddb975ab1105b2aae1abd005964966406e5","modified":1515036736485},{"_id":"source/Img/2017/08/22/005VELIygy72bYiPHYK2a.png","hash":"9be0bd45abed4f38e64752a761625295b91d16ef","modified":1515036736531},{"_id":"source/Img/2017/08/22/微信截图_20170822163925.png","hash":"b5c5d9cb3e24cf6e2694cf0657f3369b9b68249e","modified":1515036736532},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1515036738809},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1515036738810},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"b0e2a0e27a32f72cb283fe4b33d010d485113379","modified":1515036739036},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"237d185ac62ec9877e300947fa0109c44fb8db19","modified":1515036739037},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1515036739180},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1515036739180},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"7ad4081466b397e2a6204141bb7768b7c01bd93c","modified":1515036739181},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1515036739492},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1515036739809},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1515036739985},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"eec22651977ea25b5e65e8cb1b4906eef69ec588","modified":1515036739985},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"1da5c800d025345f212a3bf1be035060f4e5e6ed","modified":1515036739985},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9a45ed506274f655b11995c408cc566b16dada79","modified":1515036740052},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1515036740053},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1515036740053},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1515036740052},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a509016ac0227a1903d7f0ca3a825cf9ac7fde33","modified":1515036740062},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1515036740064},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1515036740065},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1515036740066},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1515036740173},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"ce272226a1570f5f7c70243b751a5b0fe1671a88","modified":1515036740174},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1515036740176},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1515036740175},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"bce344d3a665b4c55230d2a91eac2ad16d6f32fd","modified":1515036740271},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"416988dca389e6e2fdfa51fa7f4ee07eb53f82fb","modified":1515036740271},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"4642e30010af8b2b037f5b43146b10a934941958","modified":1515036740272},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1515036740348},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"a496e837760cce5ec624a76aa252da74e750fc27","modified":1515036740349},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"86197902dfd3bededba10ba62b8f9f22e0420bde","modified":1515036740349},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1515036740180},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1515036740181},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1515036740182},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1515036740269},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1515036740270},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c4358416f0a116d7f4037542fa3b385947e80908","modified":1515036740763},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"6c26cdb36687d4f0a11dabf5290a909c3506be5c","modified":1515036740802},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"6d586bfcfb7ae48f1b12f76eec82d3ad31947501","modified":1515036740805},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"16b03db23a52623348f37c04544f2792032c1fb6","modified":1515036740896},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1515036740983},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1515036740983},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1515036740984},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1515036741035},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1515036741036},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1515036741036},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1515036741074},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1515036741075},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1515036741075},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1515036741138},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1515036741138},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1515036741309},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1515036741310},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1515036741355},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1515036741880},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1515036741881},{"_id":"source/Img/2017/08/10/2017-08-10_17-42.png","hash":"25469db23e8704bd3a4a5dbaf86aaf608672bc10","modified":1515036736113},{"_id":"source/Img/2017/08/10/2017-08-10_19-54.jpg","hash":"030c74f0f4488a3a131765e49153ac1bbbd760a0","modified":1515036736116},{"_id":"source/Img/2017/08/10/2017-08-10_19-56.jpg","hash":"563a3b85585951e58d64b666689e0a549dd50bc2","modified":1515036736120},{"_id":"source/Img/2017/08/10/2017-08-10_20-17.jpg","hash":"ee3b423f8276de430a68876e611e03179179708d","modified":1515036736129},{"_id":"source/Img/2017/08/16/2017-08-16_19-53.png","hash":"618bb4c626d92fdc4d616b2686d23fc3eb2d72ed","modified":1515036736277},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"4ac683b2bc8531c84d98f51b86957be0e6f830f3","modified":1515036740804},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1515036741485},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1515036741488},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1515036741884},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1515036739182},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"1a0d059799a298fe17c49a44298d32cebde93785","modified":1515036739183},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1515036739182},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1515036739233},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1515036739233},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"b3b783511bbd94af7e941abf8ff411885db7395b","modified":1515036739234},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1515036739234},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1515036739299},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1515036739181},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1515036739384},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1515036739491},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1515036739384},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1515036739299},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1515036739492},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"caf263d1928496688c0e1419801eafd7e6919ce5","modified":1515036739717},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"875cbe88d5c7f6248990e2beb97c9828920e7e24","modified":1515036739493},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1515036739718},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"4783f85872bc7e218c1522a5c1c68cd27a5922db","modified":1515036739493},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"58f9e6aba94733244a87d2ba5966c5a009486509","modified":1515036739720},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1515036739721},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"658accf8e196721f295003da66941e6d1f7b81b0","modified":1515036739723},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"27deb3d3a243d30022055dac7dad851024099a8b","modified":1515036739724},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"f363a544aa800a2a5ed97c40887fe9743f67b03b","modified":1515036739726},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1515036739729},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1515036739731},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1515036739727},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1515036739730},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"2cb09973d29a8e34e2a3425ac6e0938296970d8e","modified":1515036739732},{"_id":"themes/next/source/css/_common/components/post/post-wordcount.styl","hash":"268c9704481fdb0b4d1e646196386143990fe235","modified":1515036739734},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"efc65bba7f2423439e9bca7d32ef7728c21e5c97","modified":1515036739736},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"5f3510419161ec22ca88cce6a181ddad61de9e86","modified":1515036739738},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1515036739739},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"ac060861b27b764bc4012fc362a25a332df4045a","modified":1515036739806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1515036739807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"11c22f0fb3f6beb13e5a425ec064a4ff974c13b7","modified":1515036739806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1515036739807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a1521d48bb06d8d703753f52a198baa197af7da2","modified":1515036739808},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"28a8737c090fbffd188d73a00b42e90b9ee57df2","modified":1515036739808},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e00d9a0bdf35ffc0a7fa387fa294b953c2d28fc","modified":1515036739809},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1515036739809},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1515036739810},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"a3bdd71237afc112b2aa255f278cab6baeb25351","modified":1515036739810},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1515036739892},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"3159b55f35c40bd08e55b00148c523760a708c51","modified":1515036739811},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"2ab1322fe52ab5aafd49e68f5bd890e8380ee927","modified":1515036739892},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"962b654f8f7cbd18a298126a403d236ed4540516","modified":1515036739893},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"9a409b798decdefdaf7a23f0b11004a8c27e82f3","modified":1515036739893},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"154a87a32d2fead480d5e909c37f6c476671c5e6","modified":1515036739894},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"b80604868e4f5cf20fccafd7ee415c20c804f700","modified":1515036739895},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"a6e7d698702c2e383dde3fde2abde27951679084","modified":1515036739983},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1515036739896},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"bba4f3bdb7517cd85376df3e1209b570c0548c69","modified":1515036739895},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"10599e16414a8b7a76c4e79e6617b5fe3d4d1adf","modified":1515036739983},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1515036739984},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1515036739983},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"37e406ec42b7a53c72395bdbaa434270019e7179","modified":1515036739984},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"16087276945fa038f199692e3eabb1c52b8ea633","modified":1515036739984},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1515036740178},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1515036740179},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1515036740270},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1515036740771},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1515036740772},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1515036740774},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1515036740801},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1515036741037},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1515036741037},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1515036741072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1515036741072},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1515036741073},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1515036741073},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1515036741364},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1515036741373},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1515036741482},{"_id":"source/Img/2017/08/16/2017-08-16_20-02.png","hash":"0fd0929bfe27dcef97d80ea662be1182428730e4","modified":1515036736374},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1515036740900},{"_id":"themes/next/source/lib/three/three.min.js","hash":"26273b1cb4914850a89529b48091dc584f2c57b8","modified":1515036741879},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1515036741474},{"_id":"source/Img/2017/08/17/2017-08-17_11-32.jpg","hash":"2493efef1d0f2c026e050965af064de6645966f6","modified":1515036736449}],"Category":[],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2018-01-04T03:32:16.019Z","updated":"2018-01-04T03:32:16.019Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cjc1n6cqd0000ig5n7xlakwek"},{"title":"tags","date":"2017-08-11T12:44:05.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-08-11 20:44:05\ntype: \"tags\"\n---\n","updated":"2018-01-04T03:32:16.897Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjc1n6cso0002ig5nnbq6x2pl"}],"Post":[{"title":"hexo 主题配置以及小插件的部署","_content":"\n# 代码高亮\n","source":"_drafts/hexo小插件的部署.md","raw":"---\ntitle: hexo 主题配置以及小插件的部署\ntags: \n  - Hexo\n---\n\n# 代码高亮\n","slug":"hexo小插件的部署","published":0,"date":"2018-01-04T03:32:16.716Z","updated":"2018-01-04T03:32:16.717Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6csk0001ig5nkngzs2t7"},{"title":"C++ STL总结","date":"2017-08-24T08:39:01.000Z","_content":"# C++ STL总结\n\n## String\n\n### length && size\n\n`size_t size() const noexcept;`**返回 string 长度。**\n>string::length() 与 string::size() 完全相同。\n\n### substr\n\n`string substr (size_t pos = 0, size_t len = npos) const;`**产生子串**\n返回一个新建的初始化为 string 对象的子串的拷贝 string 对象。\n\n子串是，在字符位置 pos 开始，跨越 len 个字符（或直到字符串的结尾，以先到者为准）对象的部分。\n\n```C++\nstring str=\"We think in generalities, but we live in details.\";\nstring str2 = str.substr (3,5);     // \"think\"\nstring str3 = str.substr (3);     // get from \"think\" to the end\n```\n\n### string()\n\n`String(number, character)`**返回 string**\n\n```C++\nz=string(3,\"w\")   //\"www\"\nz=string(3,\"aw\")  //\"awa\"\nz=string(3,\"www\") //\"www\"\n\nvector<char> v;\nv.push_back('a');\nv.push_back('b');\nv.push_back('c');\nz = string(v.begin(), v.end()); //\"abc\"\n```\n\n### empty\n\n**true if the string length is 0, false otherwise.**\n\n### insert\n\n#### 返回插入的第一个字母的 iterator 以及修改过后的 str\n\n```C++\n// inserting into a string\n#include <iostream>\n#include <string>\n\nint main ()\n{\n  std::string str=\"to be question\";\n  std::string str2=\"the \";\n  std::string str3=\"or not to be\";\n  std::string::iterator it;\n\n  // used in the same order as described above:\n  str.insert(6,str2);                 // to be (the )question\n  str.insert(6,str3,3,4);             // to be (not )the question\n  str.insert(10,\"that is cool\",8);    // to be not (that is )the question\n  str.insert(10,\"to be \");            // to be not (to be )that is the question\n  str.insert(15,1,':');               // to be not to be(:) that is the question\n  it = str.insert(str.begin()+5,','); // to be(,) not to be: that is the question\n  str.insert (str.end(),3,'.');       // to be, not to be: that is the question(...)\n  str.insert (it+2,str3.begin(),str3.begin()+3); // (or )\n\n  std::cout << str << '\\n';\n  return 0;\n}\n```","source":"_posts/C-STL总结.md","raw":"---\ntitle: C++ STL总结\ndate: 2017-08-24 16:39:01\ntags:\n  - C++\n  - ACM\n---\n# C++ STL总结\n\n## String\n\n### length && size\n\n`size_t size() const noexcept;`**返回 string 长度。**\n>string::length() 与 string::size() 完全相同。\n\n### substr\n\n`string substr (size_t pos = 0, size_t len = npos) const;`**产生子串**\n返回一个新建的初始化为 string 对象的子串的拷贝 string 对象。\n\n子串是，在字符位置 pos 开始，跨越 len 个字符（或直到字符串的结尾，以先到者为准）对象的部分。\n\n```C++\nstring str=\"We think in generalities, but we live in details.\";\nstring str2 = str.substr (3,5);     // \"think\"\nstring str3 = str.substr (3);     // get from \"think\" to the end\n```\n\n### string()\n\n`String(number, character)`**返回 string**\n\n```C++\nz=string(3,\"w\")   //\"www\"\nz=string(3,\"aw\")  //\"awa\"\nz=string(3,\"www\") //\"www\"\n\nvector<char> v;\nv.push_back('a');\nv.push_back('b');\nv.push_back('c');\nz = string(v.begin(), v.end()); //\"abc\"\n```\n\n### empty\n\n**true if the string length is 0, false otherwise.**\n\n### insert\n\n#### 返回插入的第一个字母的 iterator 以及修改过后的 str\n\n```C++\n// inserting into a string\n#include <iostream>\n#include <string>\n\nint main ()\n{\n  std::string str=\"to be question\";\n  std::string str2=\"the \";\n  std::string str3=\"or not to be\";\n  std::string::iterator it;\n\n  // used in the same order as described above:\n  str.insert(6,str2);                 // to be (the )question\n  str.insert(6,str3,3,4);             // to be (not )the question\n  str.insert(10,\"that is cool\",8);    // to be not (that is )the question\n  str.insert(10,\"to be \");            // to be not (to be )that is the question\n  str.insert(15,1,':');               // to be not to be(:) that is the question\n  it = str.insert(str.begin()+5,','); // to be(,) not to be: that is the question\n  str.insert (str.end(),3,'.');       // to be, not to be: that is the question(...)\n  str.insert (it+2,str3.begin(),str3.begin()+3); // (or )\n\n  std::cout << str << '\\n';\n  return 0;\n}\n```","slug":"C-STL总结","published":1,"updated":"2018-01-04T09:23:58.342Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6csp0003ig5ny8ig41ys"},{"title":"hexo自定义页面样式","_content":"","source":"_drafts/hexo自定义页面样式.md","raw":"---\ntitle: hexo自定义页面样式\ntags: \n    - Hexo\n---\n","slug":"hexo自定义页面样式","published":0,"date":"2018-01-04T03:32:16.717Z","updated":"2018-01-04T03:32:16.718Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6cst0005ig5nisfj763y"},{"title":"ACM 竞赛小技巧","date":"2017-08-23T07:57:24.000Z","_content":"# ACM 竞赛小技巧\n\n## for循环\n\n当使用 for 循环从头至尾去循环一个数组 s 的时候，可以用\n\n```C++\nfor(int i=0; s[i]; ++i)\n```\n\n---\n\n## INF\n\n```C++\nconst int INF = 0x3f3f3f3f;\n```\n\n具体原因参见[为何程序员喜欢将 INF 设置为 0x3f3f3f3f ？](https://yuki-14544869.github.io/2017/08/23/%E4%B8%BA%E4%BD%95%E7%A8%8B%E5%BA%8F%E5%91%98%E5%96%9C%E6%AC%A2%E5%B0%86INF%E8%AE%BE%E7%BD%AE%E4%B8%BA0x3f3f3f3f%EF%BC%9F/)\n\n---\n\n## long long\n\n在计算过程中可以用\n\n```C++\nlong long ans = 1LL * x * x;\n```\n\n将原先被设置成 int 类型的整数转化成 long long 类型。","source":"_posts/ACM-竞赛小技巧.md","raw":"---\ntitle: ACM 竞赛小技巧\ndate: 2017-08-23 15:57:24\ntags:\n  - ACM\n  - C++\n---\n# ACM 竞赛小技巧\n\n## for循环\n\n当使用 for 循环从头至尾去循环一个数组 s 的时候，可以用\n\n```C++\nfor(int i=0; s[i]; ++i)\n```\n\n---\n\n## INF\n\n```C++\nconst int INF = 0x3f3f3f3f;\n```\n\n具体原因参见[为何程序员喜欢将 INF 设置为 0x3f3f3f3f ？](https://yuki-14544869.github.io/2017/08/23/%E4%B8%BA%E4%BD%95%E7%A8%8B%E5%BA%8F%E5%91%98%E5%96%9C%E6%AC%A2%E5%B0%86INF%E8%AE%BE%E7%BD%AE%E4%B8%BA0x3f3f3f3f%EF%BC%9F/)\n\n---\n\n## long long\n\n在计算过程中可以用\n\n```C++\nlong long ans = 1LL * x * x;\n```\n\n将原先被设置成 int 类型的整数转化成 long long 类型。","slug":"ACM-竞赛小技巧","published":1,"updated":"2018-01-04T09:13:26.397Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6csu0006ig5n519tzfke"},{"title":"Centos7 卸载 OpenJDK","date":"2018-01-05T07:47:19.000Z","_content":"# Centos 卸载 OpenJDK\n\n## 查找 OpenJDK 安装包\n\n```bash\n[root@localhost ~]# rpm -qa | grep openjdk\njava-1.8.0-openjdk-headless-1.8.0.151-5.b12.el7_4.x86_64\njava-1.8.0-openjdk-1.8.0.151-5.b12.el7_4.x86_64\n```\n\n## 卸载 OpenJDK 安装包\n\n```bash\n[root@localhost ~]# yum -y remove java-1.8.0-openjdk-headless-1.8.0.151-5.b12.el7_4.x86_64\n[root@localhost ~]# yum -y remove java-1.8.0-openjdk-1.8.0.151-5.b12.el7_4.x86_64\n```\n\n## 参考文献\n\n1.[CentOS7卸载OpenJDK安装Oracle JDK](http://blog.csdn.net/zitong_ccnu/article/details/40041533)","source":"_posts/Centos7-卸载-OpenJDK.md","raw":"---\ntitle: Centos7 卸载 OpenJDK\ndate: 2018-01-05 15:47:19\ntags:\n  - Centos\n---\n# Centos 卸载 OpenJDK\n\n## 查找 OpenJDK 安装包\n\n```bash\n[root@localhost ~]# rpm -qa | grep openjdk\njava-1.8.0-openjdk-headless-1.8.0.151-5.b12.el7_4.x86_64\njava-1.8.0-openjdk-1.8.0.151-5.b12.el7_4.x86_64\n```\n\n## 卸载 OpenJDK 安装包\n\n```bash\n[root@localhost ~]# yum -y remove java-1.8.0-openjdk-headless-1.8.0.151-5.b12.el7_4.x86_64\n[root@localhost ~]# yum -y remove java-1.8.0-openjdk-1.8.0.151-5.b12.el7_4.x86_64\n```\n\n## 参考文献\n\n1.[CentOS7卸载OpenJDK安装Oracle JDK](http://blog.csdn.net/zitong_ccnu/article/details/40041533)","slug":"Centos7-卸载-OpenJDK","published":1,"updated":"2018-01-05T07:51:57.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6csw0007ig5npbwrm8x8"},{"title":"Windows 下利用 Cygwin 搭建 C/C++ 开发环境","date":"2017-08-22T08:30:47.000Z","_content":"\n暑假学校进行实验室保密检查，把实验室的电脑全部装上了一个影子卫士之类的软件，却莫名其妙的把我的编译环境全部弄坏了，因此选择重装。我的 C 语言 IDE 是 JetBrains 家的 Clion。 Clion 对 MinGW 的支持不是很好，会出现输入回显等奇怪的现象，因此选择 Cygwin。\n\n原本网上Cygwin的安装配置教程很多的，也就没想着存档，然而今天想找出来时却发现一夜之间所有教程都不见了，于是便将我好不容易在新浪博客上找到的教程扒出来贴在自己的博客里。\n\n---\n# 下载Cygwin\n首先去网站 [Cygwin官网](http://www.cygwin.com/) 下载 Cygwin 的 Windows系统的安装包，32位系统下载steup-x86.exe，64位系统则下载steup-x86_64.exe，界面如下。\n![](/Img/2017/08/22/微信截图_20170822163925.png)\n\n---\n# 安装\n1. 双击下载好的Cygwin安装包，出现安装界面，点击下一步。之后出现如下界面，默认为第一个选项，意思是从网络下载并安装（从官网下载的不是完整安装包，只是安装引导程序），第二个选项是仅仅下载不安装，第三个则是从本地安装（意思是已经下载好了需要的安装文件）。我还没有下载好文件，并且要安装，所以选择默认第一项，之后点击下一步。![](/Img/2017/08/22/005VELIygy72bVbRvLMb6.png)\n\n2. 在这里选择安装目录，一般要有一个专门用来作开发工具的安装目录，我这里在为C:\\Develop，并在此文件下新建用来安装Cygwin的目录，所以总的目录为C:\\Develop\\MinGW。选择所有用户，之后点击下一步。![](/Img/2017/08/22/005VELIygy72bVYCn7V77.png)\n\n3. 这里要为将要下载的安装包选择存放位置，我选择在C盘的下载目录。选择好后点击下一步。![](/Img/2017/08/22/005VELIygy72bWapp9K18.png)\n\n4. 选择默认，点击下一步。![](/Img/2017/08/22/005VELIygy72bWjrZswb4.png)\n\n5. 闪过一个页面之后出现如下界面，选择蓝色的网址，这是国内中科大的镜像站，所以网速较快，东北地区的也可以选择上面那一个，是大连东软学院的镜像站，隔得较近，应该比中科大的快。![](/Img/2017/08/22/005VELIygy72bWqnp3Gb0.png)\n\n6. 在这个页面之后，就是最重要的一个地方了，会自动进入下一步。![](/Img/2017/08/22/005VELIygy72bWMUKWq9e.png)\n\n7. 在画红线处分别搜索 gcc-core、gcc-g++、make、gdb、binutils，以上所有项目都在 devel 文件夹下。![](/Img/2017/08/22/005VELIygy72bWVT3Vy54.jpg)\n\n8. 原本的 5.3.0-5 *(版本号变大了是正常的事情，反正是数字就对了)*位置也是 Skip，在点击一次之后，出现如下界面即可，其他的也一样。![](/Img/2017/08/22/005VELIygy72bX5gdUn0b.jpg) **gcc-core**\n![](/Img/2017/08/22/005VELIygy72bXmEdje5c.jpg) **gcc-g++**\n![](/Img/2017/08/22/005VELIygy72bXuaSZOc0.jpg) **make**\n![](/Img/2017/08/22/005VELIygy72bXy1AnVd3.png) **gdb**\n![](/Img/2017/08/22/005VELIygy72bXCBtSe2e.jpg) **binutils**\n\n9. 之后点击左下角的下一步。![](/Img/2017/08/22/005VELIygy72bXRyn6i82.jpg)\n\n10. 这里检查要安装的项目，和上面选择的是不一样的，增加了许多相关的文件，不好检查，不过一般没问题，所以直接点击下一步。![](/Img/2017/08/22/005VELIygy72bXYrMjsbe.png)\n\n11. 此时开始下载并安装Cygwin，时间稍微久一点。![](/Img/2017/08/22/005VELIygy72bYiPHYK2a.png)\n\n12. 根据需要是否在桌面（第一项）和开始菜单（第二项）创建快捷方式，因为我不常用终端模式，但有时候可能需要，所以只选择第二项，点击完成。![](/Img/2017/08/22/005VELIygy72bYArRxCa0.png)\n\n13. 将安装目录下的 bin目录 添加到 Path 环境变量。![](/Img/2017/08/22/005VELIygy72bYMYMAN09.png)\n\n---\n# 验证安装\n验证是否安装成功。打开命令提示符窗口，输入 gcc -v，出现以下情况说明安装成功。![](/Img/2017/08/22/005VELIygy72bYYyi2cc0.jpg)\n\n---\n# 参考文献\n[Windows下利用Cygwin搭建C/C++开发环境GCC](http://blog.sina.com.cn/s/blog_143cf62360102wrgd.html)","source":"_posts/Windows-下利用-Cygwin-搭建-C-C-开发环境.md","raw":"---\ntitle: Windows 下利用 Cygwin 搭建 C/C++ 开发环境\ndate: 2017-08-22 16:30:47\ntags:\n  - Clion\n  - 开发环境\n---\n\n暑假学校进行实验室保密检查，把实验室的电脑全部装上了一个影子卫士之类的软件，却莫名其妙的把我的编译环境全部弄坏了，因此选择重装。我的 C 语言 IDE 是 JetBrains 家的 Clion。 Clion 对 MinGW 的支持不是很好，会出现输入回显等奇怪的现象，因此选择 Cygwin。\n\n原本网上Cygwin的安装配置教程很多的，也就没想着存档，然而今天想找出来时却发现一夜之间所有教程都不见了，于是便将我好不容易在新浪博客上找到的教程扒出来贴在自己的博客里。\n\n---\n# 下载Cygwin\n首先去网站 [Cygwin官网](http://www.cygwin.com/) 下载 Cygwin 的 Windows系统的安装包，32位系统下载steup-x86.exe，64位系统则下载steup-x86_64.exe，界面如下。\n![](/Img/2017/08/22/微信截图_20170822163925.png)\n\n---\n# 安装\n1. 双击下载好的Cygwin安装包，出现安装界面，点击下一步。之后出现如下界面，默认为第一个选项，意思是从网络下载并安装（从官网下载的不是完整安装包，只是安装引导程序），第二个选项是仅仅下载不安装，第三个则是从本地安装（意思是已经下载好了需要的安装文件）。我还没有下载好文件，并且要安装，所以选择默认第一项，之后点击下一步。![](/Img/2017/08/22/005VELIygy72bVbRvLMb6.png)\n\n2. 在这里选择安装目录，一般要有一个专门用来作开发工具的安装目录，我这里在为C:\\Develop，并在此文件下新建用来安装Cygwin的目录，所以总的目录为C:\\Develop\\MinGW。选择所有用户，之后点击下一步。![](/Img/2017/08/22/005VELIygy72bVYCn7V77.png)\n\n3. 这里要为将要下载的安装包选择存放位置，我选择在C盘的下载目录。选择好后点击下一步。![](/Img/2017/08/22/005VELIygy72bWapp9K18.png)\n\n4. 选择默认，点击下一步。![](/Img/2017/08/22/005VELIygy72bWjrZswb4.png)\n\n5. 闪过一个页面之后出现如下界面，选择蓝色的网址，这是国内中科大的镜像站，所以网速较快，东北地区的也可以选择上面那一个，是大连东软学院的镜像站，隔得较近，应该比中科大的快。![](/Img/2017/08/22/005VELIygy72bWqnp3Gb0.png)\n\n6. 在这个页面之后，就是最重要的一个地方了，会自动进入下一步。![](/Img/2017/08/22/005VELIygy72bWMUKWq9e.png)\n\n7. 在画红线处分别搜索 gcc-core、gcc-g++、make、gdb、binutils，以上所有项目都在 devel 文件夹下。![](/Img/2017/08/22/005VELIygy72bWVT3Vy54.jpg)\n\n8. 原本的 5.3.0-5 *(版本号变大了是正常的事情，反正是数字就对了)*位置也是 Skip，在点击一次之后，出现如下界面即可，其他的也一样。![](/Img/2017/08/22/005VELIygy72bX5gdUn0b.jpg) **gcc-core**\n![](/Img/2017/08/22/005VELIygy72bXmEdje5c.jpg) **gcc-g++**\n![](/Img/2017/08/22/005VELIygy72bXuaSZOc0.jpg) **make**\n![](/Img/2017/08/22/005VELIygy72bXy1AnVd3.png) **gdb**\n![](/Img/2017/08/22/005VELIygy72bXCBtSe2e.jpg) **binutils**\n\n9. 之后点击左下角的下一步。![](/Img/2017/08/22/005VELIygy72bXRyn6i82.jpg)\n\n10. 这里检查要安装的项目，和上面选择的是不一样的，增加了许多相关的文件，不好检查，不过一般没问题，所以直接点击下一步。![](/Img/2017/08/22/005VELIygy72bXYrMjsbe.png)\n\n11. 此时开始下载并安装Cygwin，时间稍微久一点。![](/Img/2017/08/22/005VELIygy72bYiPHYK2a.png)\n\n12. 根据需要是否在桌面（第一项）和开始菜单（第二项）创建快捷方式，因为我不常用终端模式，但有时候可能需要，所以只选择第二项，点击完成。![](/Img/2017/08/22/005VELIygy72bYArRxCa0.png)\n\n13. 将安装目录下的 bin目录 添加到 Path 环境变量。![](/Img/2017/08/22/005VELIygy72bYMYMAN09.png)\n\n---\n# 验证安装\n验证是否安装成功。打开命令提示符窗口，输入 gcc -v，出现以下情况说明安装成功。![](/Img/2017/08/22/005VELIygy72bYYyi2cc0.jpg)\n\n---\n# 参考文献\n[Windows下利用Cygwin搭建C/C++开发环境GCC](http://blog.sina.com.cn/s/blog_143cf62360102wrgd.html)","slug":"Windows-下利用-Cygwin-搭建-C-C-开发环境","published":1,"updated":"2018-01-04T03:32:16.722Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6csy000aig5ne29u6m8i"},{"layout":"hexo","title":"hexo 主题配置以及小插件的部署","date":"2017-08-12T14:12:54.000Z","_content":"# hexo 主题配置以及小插件的部署\n\n## 设置代码高亮主题\n\nNexT 使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties：\n![normal](/Img/2017/08/12/2017-8-12_22-07-normal.png)\n![night](/Img/2017/08/12/2017-8-12_22-07-night.png)\n![night blue](/Img/2017/08/12/2017-8-12_22-07-night blue.png)\n![night bright](/Img/2017/08/12/2017-8-12_22-07-night bright.png)\n![night eighties](/Img/2017/08/12/2017-8-12_22-07-night eighties.png)\n\n更改**主题配置文件** highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如：\n\n```yml\nhighlight_theme: night eighties\n```\n\n更改**站点配置文件**  hilight.auto_detect 设置为 true：\n\n```yml\nhighlight:\n  enable: true\n  auto_detect: true\n  line_number: true\n  tab_replace:\n```\n\n## 参考文献\n\n1. [hexo 主题配置](http://theme-next.iissnan.com/theme-settings.html)\n1. [hexo中next主题代码高亮无法正常显示，如何解决？](https://www.zhihu.com/question/51705387)","source":"_posts/hexo 主题配置以及小插件的部署.md","raw":"---\nlayout: hexo\ntitle: hexo 主题配置以及小插件的部署\ndate: 2017-08-12 22:12:54\ntags: \n  - Hexo\n---\n# hexo 主题配置以及小插件的部署\n\n## 设置代码高亮主题\n\nNexT 使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties：\n![normal](/Img/2017/08/12/2017-8-12_22-07-normal.png)\n![night](/Img/2017/08/12/2017-8-12_22-07-night.png)\n![night blue](/Img/2017/08/12/2017-8-12_22-07-night blue.png)\n![night bright](/Img/2017/08/12/2017-8-12_22-07-night bright.png)\n![night eighties](/Img/2017/08/12/2017-8-12_22-07-night eighties.png)\n\n更改**主题配置文件** highlight_theme 字段，将其值设定成你所喜爱的高亮主题，例如：\n\n```yml\nhighlight_theme: night eighties\n```\n\n更改**站点配置文件**  hilight.auto_detect 设置为 true：\n\n```yml\nhighlight:\n  enable: true\n  auto_detect: true\n  line_number: true\n  tab_replace:\n```\n\n## 参考文献\n\n1. [hexo 主题配置](http://theme-next.iissnan.com/theme-settings.html)\n1. [hexo中next主题代码高亮无法正常显示，如何解决？](https://www.zhihu.com/question/51705387)","slug":"hexo 主题配置以及小插件的部署","published":1,"updated":"2018-01-04T09:37:17.326Z","comments":1,"photos":[],"link":"","_id":"cjc1n6csz000big5n9e8nk2s7"},{"title":"hexo 写博客的小技巧","date":"2017-08-12T12:59:07.000Z","_content":"# hexo 写博客的小技巧\n\n## 草稿\n\n草稿相当于很多博客都有的“私密文章”功能。\n\n```bash\nhexo new draft \"your new article's name\"\n```\n\n会在 source/_drafts 目录下生成一个 your-new-article-s-name.md 的文件。但是这个文件不会被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到 _drafts 目录中。\n\n如果你希望强行预览草稿，更改配置文件：\n\n```bash\nrender_drafts:true\n```\n\n或者以如下方式启动server：\n\n```bash\nhexo server --drafts\n```\n\n下面这条命令可以把草稿变成文章：\n\n```bash\nhexo publish [layout] filename\n```\n\n---\n\n## 修改\n\n### 文章名修改\n\n新建文章的时候不小心写错了文章名，可以在该文件的  md 文件内直接修改 title 值即可。至于该文件的文件名改与不改均可，文件名的作用是作为标识你的文章的id食用的，在地址栏才可以看见。不过这里建议还是修改一下，不然如果有细心的读者就会发现地址栏的文章名与当前文章的文章名不匹配，对于强迫症来说是一件非常痛苦的事情。\n\n## 参考文献\n\n1. [Hexo 入门指南（三） - 文章 & 草稿](http://jingyan.baidu.com/article/63f236280da7770208ab3d27.html)","source":"_posts/hexo 写博客的小技巧.md","raw":"---\ntitle: hexo 写博客的小技巧\ntags: \n  - Hexo\ndate: 2017-08-12 20:59:07\n---\n# hexo 写博客的小技巧\n\n## 草稿\n\n草稿相当于很多博客都有的“私密文章”功能。\n\n```bash\nhexo new draft \"your new article's name\"\n```\n\n会在 source/_drafts 目录下生成一个 your-new-article-s-name.md 的文件。但是这个文件不会被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到 _drafts 目录中。\n\n如果你希望强行预览草稿，更改配置文件：\n\n```bash\nrender_drafts:true\n```\n\n或者以如下方式启动server：\n\n```bash\nhexo server --drafts\n```\n\n下面这条命令可以把草稿变成文章：\n\n```bash\nhexo publish [layout] filename\n```\n\n---\n\n## 修改\n\n### 文章名修改\n\n新建文章的时候不小心写错了文章名，可以在该文件的  md 文件内直接修改 title 值即可。至于该文件的文件名改与不改均可，文件名的作用是作为标识你的文章的id食用的，在地址栏才可以看见。不过这里建议还是修改一下，不然如果有细心的读者就会发现地址栏的文章名与当前文章的文章名不匹配，对于强迫症来说是一件非常痛苦的事情。\n\n## 参考文献\n\n1. [Hexo 入门指南（三） - 文章 & 草稿](http://jingyan.baidu.com/article/63f236280da7770208ab3d27.html)","slug":"hexo 写博客的小技巧","published":1,"updated":"2018-01-04T09:12:50.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6ct1000dig5nc1tkeiz8"},{"title":"hihoCoder-1000、A + B","date":"2017-08-24T08:17:38.000Z","_content":"# [#1000 : A + B](http://hihocoder.com/problemset/problem/1000)\n\n## 描述\n\n求两个整数A+B的和\n\n---\n\n## 输入\n\n输入包含多组数据。\n\n每组数据包含两个整数A(1 ≤ A ≤ 100)和B(1 ≤ B ≤ 100)。\n\n---\n\n## 输出\n\n对于每组数据输出A+B的和。\n\n---\n\n## 样例输入\n\n>1 2\n3 4\n\n---\n\n## 样例输出\n\n>3\n7\n\n---\n\n## 限制\n\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n\n## 思路\n\n经典题\n\n---\n\n## 题解\n\n### C++\n\n```C++\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int INF = 0x3f3f3f3f;\n\nint main() {\n    int a, b;\n    while(cin >> a >> b) {\n        cout << a+b << endl;\n    }\n    return 0;\n}\n```\n\n### Java\n\n```Java\nimport java.util.Scanner;\n\npublic class Main {\n    /*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n    */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            System.out.println(a+b);\n        }\n        in.close();\n    }\n}\n```","source":"_posts/hihoCoder-1000-A-B.md","raw":"---\ntitle: hihoCoder-1000、A + B\ndate: 2017-08-24 16:17:38\ntags:\n  - ACM\n  - hiho\n---\n# [#1000 : A + B](http://hihocoder.com/problemset/problem/1000)\n\n## 描述\n\n求两个整数A+B的和\n\n---\n\n## 输入\n\n输入包含多组数据。\n\n每组数据包含两个整数A(1 ≤ A ≤ 100)和B(1 ≤ B ≤ 100)。\n\n---\n\n## 输出\n\n对于每组数据输出A+B的和。\n\n---\n\n## 样例输入\n\n>1 2\n3 4\n\n---\n\n## 样例输出\n\n>3\n7\n\n---\n\n## 限制\n\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n\n## 思路\n\n经典题\n\n---\n\n## 题解\n\n### C++\n\n```C++\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int INF = 0x3f3f3f3f;\n\nint main() {\n    int a, b;\n    while(cin >> a >> b) {\n        cout << a+b << endl;\n    }\n    return 0;\n}\n```\n\n### Java\n\n```Java\nimport java.util.Scanner;\n\npublic class Main {\n    /*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n    */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        while(in.hasNext()) {\n            int a = in.nextInt();\n            int b = in.nextInt();\n            System.out.println(a+b);\n        }\n        in.close();\n    }\n}\n```","slug":"hihoCoder-1000-A-B","published":1,"updated":"2018-01-04T09:39:09.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6ct3000fig5npsmm4881"},{"title":"hexo 博客多机更新","date":"2017-08-17T03:04:48.000Z","_content":"\n晚上回寝室，想用电脑写博客时发现自己平常随身携带的本子忘记带回寝室了，于是便上网搜索了一下如何使用不同的电脑更新同一个博客，感谢[CrazyMilk](https://www.zhihu.com/people/CrazyMilk)在知乎上提供的方法。\n\n---\n**这里假设你已经创建出了自己的博客并希望可以将其修改为适合多机使用的情况，如果没有创建出自己的博客，请参照我的这一篇博客：[使用hexo+github搭建我的个人博客](https://yuki-14544869.github.io/2017/08/10/%E4%BD%BF%E7%94%A8%20hexo-github%20%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/)**\n\n---\n\n# 一、 创建分支\n\n对你的博客的仓库创建一个新的分支。\n![](/Img/2017/08/17/2017-08-17_11-20.jpg)\n右击左上角的 Branch ，在弹出的界面的输入框里输入 HEXO 并回车。\n![](/Img/2017/08/17/2017-08-17_11-24.jpg)\n创建完成之后如下图所示\n![](/Img/2017/08/17/2017-08-17_11-22.jpg)\n\n---\n\n# 二、 设置 HEXO 为默认分支\n\n在页面的最上方寻找到Settings选项\n![](/Img/2017/08/17/2017-08-17_11-32.jpg)\n在左侧选择 Branches 将其中的 Default branch 更改为 HEXO\n![](/Img/2017/08/21/20170821213450.png)\n回到本仓库的首页，选择 upload 将博客的源文件全部上传至此远程仓库。**此时的分支应为 HEXO**\n\n---\n\n# 三、 下载博客源文件\n\n在自己选定的地方打开 git bash 使用\n\n```bash\ngit clone git@github.com:Yuki-14544869/Yuki-14544869.github.io.git //将这里的Yuki-14544869改成你的用户名\n```\n\n拷贝仓库\n\n---\n\n# 四、 搭建环境\n\n在下载下来的文件夹下打开 git bash 依次执行,**此时当前分支应显示为 HEXO**\n\n```bash\nnpm install hexo-cli -g\nnpm install hexo --save   //先安装 hexo\nnpm install\nnpm install hexo-deployer-git\n```\n\n---\n\n# 五、 修改配置\n\n修改**站点配置文件** _deploy 参数，分支应为master\n\n---\n\n# 六、 上传博客源文件\n\n与 git 提交代码的方式无二，依次执行\n\n```bash\ngit add .\ngit commit -m \"...\"\ngit push origin HEXO\n```\n\n指令将文件推送至 GitHub **此时当前分支应显示为 HEXO**\n\n--\n\n# 七、 更新博客\n\n执行\n\n```bash\nhexo g -d\n```\n\n将博客发布\n\n---\n这样一来，在GitHub上的[https://github.com/Yuki-14544869/Yuki-14544869.github.io](https://github.com/Yuki-14544869/Yuki-14544869.github.io)仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！\n\n---\n\n# 参考资料\n\n1. [使用hexo，如果换了电脑怎么更新博客？](https://www.zhihu.com/question/21193762)\n","source":"_posts/hexo-博客多机更新.md","raw":"---\ntitle: hexo 博客多机更新\ndate: 2017-08-17 11:04:48\ntags:\n  - Hexo\n---\n\n晚上回寝室，想用电脑写博客时发现自己平常随身携带的本子忘记带回寝室了，于是便上网搜索了一下如何使用不同的电脑更新同一个博客，感谢[CrazyMilk](https://www.zhihu.com/people/CrazyMilk)在知乎上提供的方法。\n\n---\n**这里假设你已经创建出了自己的博客并希望可以将其修改为适合多机使用的情况，如果没有创建出自己的博客，请参照我的这一篇博客：[使用hexo+github搭建我的个人博客](https://yuki-14544869.github.io/2017/08/10/%E4%BD%BF%E7%94%A8%20hexo-github%20%E6%90%AD%E5%BB%BA%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/)**\n\n---\n\n# 一、 创建分支\n\n对你的博客的仓库创建一个新的分支。\n![](/Img/2017/08/17/2017-08-17_11-20.jpg)\n右击左上角的 Branch ，在弹出的界面的输入框里输入 HEXO 并回车。\n![](/Img/2017/08/17/2017-08-17_11-24.jpg)\n创建完成之后如下图所示\n![](/Img/2017/08/17/2017-08-17_11-22.jpg)\n\n---\n\n# 二、 设置 HEXO 为默认分支\n\n在页面的最上方寻找到Settings选项\n![](/Img/2017/08/17/2017-08-17_11-32.jpg)\n在左侧选择 Branches 将其中的 Default branch 更改为 HEXO\n![](/Img/2017/08/21/20170821213450.png)\n回到本仓库的首页，选择 upload 将博客的源文件全部上传至此远程仓库。**此时的分支应为 HEXO**\n\n---\n\n# 三、 下载博客源文件\n\n在自己选定的地方打开 git bash 使用\n\n```bash\ngit clone git@github.com:Yuki-14544869/Yuki-14544869.github.io.git //将这里的Yuki-14544869改成你的用户名\n```\n\n拷贝仓库\n\n---\n\n# 四、 搭建环境\n\n在下载下来的文件夹下打开 git bash 依次执行,**此时当前分支应显示为 HEXO**\n\n```bash\nnpm install hexo-cli -g\nnpm install hexo --save   //先安装 hexo\nnpm install\nnpm install hexo-deployer-git\n```\n\n---\n\n# 五、 修改配置\n\n修改**站点配置文件** _deploy 参数，分支应为master\n\n---\n\n# 六、 上传博客源文件\n\n与 git 提交代码的方式无二，依次执行\n\n```bash\ngit add .\ngit commit -m \"...\"\ngit push origin HEXO\n```\n\n指令将文件推送至 GitHub **此时当前分支应显示为 HEXO**\n\n--\n\n# 七、 更新博客\n\n执行\n\n```bash\nhexo g -d\n```\n\n将博客发布\n\n---\n这样一来，在GitHub上的[https://github.com/Yuki-14544869/Yuki-14544869.github.io](https://github.com/Yuki-14544869/Yuki-14544869.github.io)仓库就有两个分支，一个hexo分支用来存放网站的原始文件，一个master分支用来存放生成的静态网页。完美( •̀ ω •́ )y！\n\n---\n\n# 参考资料\n\n1. [使用hexo，如果换了电脑怎么更新博客？](https://www.zhihu.com/question/21193762)\n","slug":"hexo-博客多机更新","published":1,"updated":"2018-01-04T08:23:31.254Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6ct6000iig5no9a1af7q"},{"title":"hihoCoder-1323、回文字符串","date":"2017-08-14T13:26:57.000Z","_content":"\n\n\n# [#1323 : 回文字符串](http://hihocoder.com/problemset/problem/1323)\n## 描述\n给定一个字符串 S ，最少需要几次增删改操作可以把 S 变成一个回文字符串？\n\n一次操作可以在任意位置插入一个字符，或者删除任意一个字符，或者把任意一个字符修改成任意其他字符。\n\n---\n## 输入\n字符串 S。S 的长度不超过100, 只包含'A'-'Z'。\n\n---\n## 输出\n最少的修改次数。\n\n---\n\n## 样例输入\nABAD\n\n---\n\n## 样例输出\n1\n\n---\n\n## 限制\n时间限制:10000ms  \n单点时限:1000ms  \n内存限制:256MB\n\n---\n## 思路\n本题是一道经典动态规划题目。\n\n假设f(s[1..n])表示把长度为n的字符串s改写成回文串需要的操作。  \n如果s[1] == s[n]，那么f(s[1..n]) = f(s[2..n-1])。\n\n否则f(s[1..n])是以下三种情况的最小值：  \n在s[n]后添加一个字符匹配s[1]，f(s[1..n]) = 1 + f(s[2..n])。\n在s[1]前添加一个字符匹配s[n], f(s[1..n]) = 1 + f(s[1..n-1])。\n把s[1]和s[n]其中一个修改为另外一个使其匹配，f(s[1..n]) = 1 + f(s[2..n-1])。\n\n改成dp即为：  \n仔细分析后发现：  \n在字符串头增加一个字符与在字符串尾删去一个字符均是 dp[i][j] = dp[i][j-1] + 1;  \n在字符串头删去一个字符与在字符串尾增加一个字符均是 dp[i][j] = dp[i+1][j] + 1;  \n在字符串中修改两边中的一个 dp[i][j] = dp[i+1][j-1] + 1;\n```\nif(s[i]==s[j])\n    dp[i][j] = dp[i+1][j-1];\nelse\n    dp[i][j] = min( dp[i+1][j], dp[i][j-1], dp[i+1][j-1] ) + 1;\n```\n\n**但是特别注意的一点是dp二维数组的遍历顺序是第一维i从len-1到0，第二维j从i+1到len-1，这样就能保证每次递推都是字符串从i到j的最优情况。**\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int  N = 1005;\n\nint dp[N][N] = {0};\n\nint min(const int a, const int b, const int c) {\n    return min( a, min( b, c ) );\n}\n\nint main() {\n    string input;\n    cin >> input;\n    int len = input.length();\n    for (int i=len-1; i>=0; --i) {\n        for (int j=i+1; j<len ; ++j) {\n            if(input[i]==input[j])\n                dp[i][j] = dp[i+1][j-1];\n            else\n                dp[i][j] = min( dp[i+1][j], dp[i][j-1], dp[i+1][j-1] ) + 1;\n        }\n    }\n    cout << dp[0][len-1] << endl;\n    return 0;\n}\n```\n### Java\n```\nimport java.util.Scanner;\n\n\npublic class Main {\n    /*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n    */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        char[] s = in.next().toCharArray();\n        int dp[][] = new int[1005][1005];\n        int len = s.length;\n        for(int i=len-1; i>=0; --i) {\n            for(int j=i+1; j<len; ++j) {\n                if(s[i] == s[j])\n                    dp[i][j] = dp[i+1][j-1];\n                else\n                    dp[i][j] = Math.min(dp[i+1][j], Math.min(dp[i][j-1], dp[i+1][j-1]) ) + 1;\n            }\n        }\n        System.out.println(dp[0][len-1]);\n        in.close();\n    }\n}\n```","source":"_posts/hihoCoder-1323-回文字符串.md","raw":"---\ntitle: hihoCoder-1323、回文字符串\ntags:\n  - ACM\n  - hiho\n  - DP\n  - 字符串\ndate: 2017-08-14 21:26:57\n---\n\n\n\n# [#1323 : 回文字符串](http://hihocoder.com/problemset/problem/1323)\n## 描述\n给定一个字符串 S ，最少需要几次增删改操作可以把 S 变成一个回文字符串？\n\n一次操作可以在任意位置插入一个字符，或者删除任意一个字符，或者把任意一个字符修改成任意其他字符。\n\n---\n## 输入\n字符串 S。S 的长度不超过100, 只包含'A'-'Z'。\n\n---\n## 输出\n最少的修改次数。\n\n---\n\n## 样例输入\nABAD\n\n---\n\n## 样例输出\n1\n\n---\n\n## 限制\n时间限制:10000ms  \n单点时限:1000ms  \n内存限制:256MB\n\n---\n## 思路\n本题是一道经典动态规划题目。\n\n假设f(s[1..n])表示把长度为n的字符串s改写成回文串需要的操作。  \n如果s[1] == s[n]，那么f(s[1..n]) = f(s[2..n-1])。\n\n否则f(s[1..n])是以下三种情况的最小值：  \n在s[n]后添加一个字符匹配s[1]，f(s[1..n]) = 1 + f(s[2..n])。\n在s[1]前添加一个字符匹配s[n], f(s[1..n]) = 1 + f(s[1..n-1])。\n把s[1]和s[n]其中一个修改为另外一个使其匹配，f(s[1..n]) = 1 + f(s[2..n-1])。\n\n改成dp即为：  \n仔细分析后发现：  \n在字符串头增加一个字符与在字符串尾删去一个字符均是 dp[i][j] = dp[i][j-1] + 1;  \n在字符串头删去一个字符与在字符串尾增加一个字符均是 dp[i][j] = dp[i+1][j] + 1;  \n在字符串中修改两边中的一个 dp[i][j] = dp[i+1][j-1] + 1;\n```\nif(s[i]==s[j])\n    dp[i][j] = dp[i+1][j-1];\nelse\n    dp[i][j] = min( dp[i+1][j], dp[i][j-1], dp[i+1][j-1] ) + 1;\n```\n\n**但是特别注意的一点是dp二维数组的遍历顺序是第一维i从len-1到0，第二维j从i+1到len-1，这样就能保证每次递推都是字符串从i到j的最优情况。**\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int  N = 1005;\n\nint dp[N][N] = {0};\n\nint min(const int a, const int b, const int c) {\n    return min( a, min( b, c ) );\n}\n\nint main() {\n    string input;\n    cin >> input;\n    int len = input.length();\n    for (int i=len-1; i>=0; --i) {\n        for (int j=i+1; j<len ; ++j) {\n            if(input[i]==input[j])\n                dp[i][j] = dp[i+1][j-1];\n            else\n                dp[i][j] = min( dp[i+1][j], dp[i][j-1], dp[i+1][j-1] ) + 1;\n        }\n    }\n    cout << dp[0][len-1] << endl;\n    return 0;\n}\n```\n### Java\n```\nimport java.util.Scanner;\n\n\npublic class Main {\n    /*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n    */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        char[] s = in.next().toCharArray();\n        int dp[][] = new int[1005][1005];\n        int len = s.length;\n        for(int i=len-1; i>=0; --i) {\n            for(int j=i+1; j<len; ++j) {\n                if(s[i] == s[j])\n                    dp[i][j] = dp[i+1][j-1];\n                else\n                    dp[i][j] = Math.min(dp[i+1][j], Math.min(dp[i][j-1], dp[i+1][j-1]) ) + 1;\n            }\n        }\n        System.out.println(dp[0][len-1]);\n        in.close();\n    }\n}\n```","slug":"hihoCoder-1323-回文字符串","published":1,"updated":"2018-01-04T03:32:16.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6ct8000kig5nsif9uwt3"},{"title":"hihoCoder-1039、字符消除","date":"2017-08-25T06:02:11.000Z","_content":"# [#1039 : 字符消除](http://hihocoder.com/problemset/problem/1039)\n\n## 描述\n\n小Hi最近在玩一个字符消除游戏。给定一个只包含大写字母\"ABC\"的字符串s，消除过程是如下进行的：\n\n1)如果s包含长度超过1的由相同字母组成的子串，那么这些子串会被同时消除，余下的子串拼成新的字符串。例如\"ABCCBCCCAA\"中\"CC\",\"CCC\"和\"AA\"会被同时消除，余下\"AB\"和\"B\"拼成新的字符串\"ABB\"。\n2)上述消除会反复一轮一轮进行，直到新的字符串不包含相邻的相同字符为止。例如”ABCCBCCCAA”经过一轮消除得到\"ABB\"，再经过一轮消除得到\"A\"\n\n游戏中的每一关小Hi都会面对一个字符串s。在消除开始前小Hi有机会在s中任意位置(第一个字符之前、最后一个字符之后以及相邻两个字符之间)插入任意一个字符('A','B'或者'C')，得到字符串t。t经过一系列消除后，小Hi的得分是消除掉的字符的总数。\n\n请帮助小Hi计算要如何插入字符，才能获得最高得分。\n\n---\n\n## 输入\n\n输入第一行是一个整数T(1<=T<=100)，代表测试数据的数量。\n\n之后T行每行一个由'A''B''C'组成的字符串s，长度不超过100。\n\n---\n\n## 输出\n\n对于每一行输入的字符串，输出小Hi最高能得到的分数。\n\n---\n\n## 提示\n\n第一组数据：在\"ABCBCCCAA\"的第2个字符后插入'C'得到\"ABCCBCCCAA\"，消除后得到\"A\"，总共消除9个字符(包括插入的'C')。\n\n第二组数据：\"AAA\"插入'A'得到\"AAAA\"，消除后得到\"\"，总共消除4个字符。\n\n第三组数据：无论是插入字符后得到\"AABC\",\"ABBC\"还是\"ABCC\"都最多消除2个字符\n\n---\n\n## 样例输入\n\n>3\nABCBCCCAA\nAAA\nABC\n\n---\n\n## 样例输出\n\n>9\n4\n2\n\n---\n\n## 限制\n\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n\n## 思路\n\n1. 在给定字符串中的任意位置插入'A'、'B'、'C'中的任意一个字符，然后计算插入后的字符经过消除后最短的字符串长度。\n1. 在计算字符消除后最短长度时，通过递归反复计算。\n1. 记录每次插入一个字符后经过第2步计算后最短的字符串长度min，最后原字符串的长度-min+1。\n\n---\n\n## 题解\n\n### C++\n\n```C++\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int INF=0x3f3f3f3f;\n\nint cal(string p) {\n    int len = p.size();\n    if(p.empty())\n        return 0;\n    string t = \"\";\n    int l = 0;\n    p += \"*\";\n    for(int i=1; p[i]; i++) {\n        if(p[i] != p[i-1]) {\n            if(l == i-1) {\n                t += p[i-1];\n            }\n            l = i;\n        }\n    }\n    if(t.size() == len)\n        return 0;\n    return len-t.size()+cal(t);\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n    int t;\n    cin >> t;\n    while(t--) {\n        string s;\n        string insert[3] = {\"A\",\"B\",\"C\"};\n        cin >> s;\n        int ans=0;\n        for(int i=0; s[i]; i++) {\n            for(int j=0; j<3; ++j) {\n                string tmp = s;\n                tmp.insert(i, insert[j]);\n                ans = max(ans, cal(tmp));\n            }\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n\n### Java\n\n```Java\nimport java.util.Scanner;\n\npublic class Main {\n    /*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n    */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        while(T-- > 0) {\n            StringBuffer input = new StringBuffer(in.next());\n            int ans = 0;\n            int len = input.length();\n            for(int i=0; i<len; ++i) {\n                for(char ch='A'; ch<='C'; ++ch) {\n                    StringBuffer tmp = new StringBuffer(input);\n                    tmp = tmp.insert(i, ch);\n                    ans = Math.max(ans, cal(tmp));\n                }\n            }\n            System.out.println(ans);\n        }\n        in.close();\n    }\n    public static int cal(StringBuffer string) {\n        int len = string.length();\n        if(len<=0)\n            return 0;\n        StringBuffer buffer = new StringBuffer(\"\");\n        int l = 0;\n        string.append(\"*\");\n        for(int i=1; i<len+1; ++i) {\n            if(string.charAt(i) != string.charAt(i-1)) {\n                if(l == i-1) {\n                    buffer.append(string.charAt(i-1));\n                }\n                l = i;\n            }\n        }\n        if (buffer.length() == len) {\n            return 0;\n        }\n        return len-buffer.length()+cal(buffer);\n    }\n}\n\n```","source":"_posts/hihoCoder-1039、字符消除.md","raw":"---\ntitle: hihoCoder-1039、字符消除\ndate: 2017-08-25 14:02:11\ntags:\n  - ACM\n  - hiho\n  - 字符串\n---\n# [#1039 : 字符消除](http://hihocoder.com/problemset/problem/1039)\n\n## 描述\n\n小Hi最近在玩一个字符消除游戏。给定一个只包含大写字母\"ABC\"的字符串s，消除过程是如下进行的：\n\n1)如果s包含长度超过1的由相同字母组成的子串，那么这些子串会被同时消除，余下的子串拼成新的字符串。例如\"ABCCBCCCAA\"中\"CC\",\"CCC\"和\"AA\"会被同时消除，余下\"AB\"和\"B\"拼成新的字符串\"ABB\"。\n2)上述消除会反复一轮一轮进行，直到新的字符串不包含相邻的相同字符为止。例如”ABCCBCCCAA”经过一轮消除得到\"ABB\"，再经过一轮消除得到\"A\"\n\n游戏中的每一关小Hi都会面对一个字符串s。在消除开始前小Hi有机会在s中任意位置(第一个字符之前、最后一个字符之后以及相邻两个字符之间)插入任意一个字符('A','B'或者'C')，得到字符串t。t经过一系列消除后，小Hi的得分是消除掉的字符的总数。\n\n请帮助小Hi计算要如何插入字符，才能获得最高得分。\n\n---\n\n## 输入\n\n输入第一行是一个整数T(1<=T<=100)，代表测试数据的数量。\n\n之后T行每行一个由'A''B''C'组成的字符串s，长度不超过100。\n\n---\n\n## 输出\n\n对于每一行输入的字符串，输出小Hi最高能得到的分数。\n\n---\n\n## 提示\n\n第一组数据：在\"ABCBCCCAA\"的第2个字符后插入'C'得到\"ABCCBCCCAA\"，消除后得到\"A\"，总共消除9个字符(包括插入的'C')。\n\n第二组数据：\"AAA\"插入'A'得到\"AAAA\"，消除后得到\"\"，总共消除4个字符。\n\n第三组数据：无论是插入字符后得到\"AABC\",\"ABBC\"还是\"ABCC\"都最多消除2个字符\n\n---\n\n## 样例输入\n\n>3\nABCBCCCAA\nAAA\nABC\n\n---\n\n## 样例输出\n\n>9\n4\n2\n\n---\n\n## 限制\n\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n\n## 思路\n\n1. 在给定字符串中的任意位置插入'A'、'B'、'C'中的任意一个字符，然后计算插入后的字符经过消除后最短的字符串长度。\n1. 在计算字符消除后最短长度时，通过递归反复计算。\n1. 记录每次插入一个字符后经过第2步计算后最短的字符串长度min，最后原字符串的长度-min+1。\n\n---\n\n## 题解\n\n### C++\n\n```C++\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int INF=0x3f3f3f3f;\n\nint cal(string p) {\n    int len = p.size();\n    if(p.empty())\n        return 0;\n    string t = \"\";\n    int l = 0;\n    p += \"*\";\n    for(int i=1; p[i]; i++) {\n        if(p[i] != p[i-1]) {\n            if(l == i-1) {\n                t += p[i-1];\n            }\n            l = i;\n        }\n    }\n    if(t.size() == len)\n        return 0;\n    return len-t.size()+cal(t);\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n    int t;\n    cin >> t;\n    while(t--) {\n        string s;\n        string insert[3] = {\"A\",\"B\",\"C\"};\n        cin >> s;\n        int ans=0;\n        for(int i=0; s[i]; i++) {\n            for(int j=0; j<3; ++j) {\n                string tmp = s;\n                tmp.insert(i, insert[j]);\n                ans = max(ans, cal(tmp));\n            }\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n\n### Java\n\n```Java\nimport java.util.Scanner;\n\npublic class Main {\n    /*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n    */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        while(T-- > 0) {\n            StringBuffer input = new StringBuffer(in.next());\n            int ans = 0;\n            int len = input.length();\n            for(int i=0; i<len; ++i) {\n                for(char ch='A'; ch<='C'; ++ch) {\n                    StringBuffer tmp = new StringBuffer(input);\n                    tmp = tmp.insert(i, ch);\n                    ans = Math.max(ans, cal(tmp));\n                }\n            }\n            System.out.println(ans);\n        }\n        in.close();\n    }\n    public static int cal(StringBuffer string) {\n        int len = string.length();\n        if(len<=0)\n            return 0;\n        StringBuffer buffer = new StringBuffer(\"\");\n        int l = 0;\n        string.append(\"*\");\n        for(int i=1; i<len+1; ++i) {\n            if(string.charAt(i) != string.charAt(i-1)) {\n                if(l == i-1) {\n                    buffer.append(string.charAt(i-1));\n                }\n                l = i;\n            }\n        }\n        if (buffer.length() == len) {\n            return 0;\n        }\n        return len-buffer.length()+cal(buffer);\n    }\n}\n\n```","slug":"hihoCoder-1039、字符消除","published":1,"updated":"2018-01-04T09:40:41.546Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6ct9000nig5nspxh957d"},{"title":"hihoCoder-1040、矩形判断","date":"2017-08-25T07:11:33.000Z","_content":"\n# [#1040 : 矩形判断](http://hihocoder.com/problemset/problem/1040)\n## 描述\n给出平面上4条线段，判断这4条线段是否恰好围成一个面积大于0的矩形。\n\n---\n## 输入\n输入第一行是一个整数T(1<=T<=100)，代表测试数据的数量。\n每组数据包含4行，每行包含4个整数x1, y1, x2, y2 (0 <= x1, y1, x2, y2 <= 100000)；其中(x1, y1), (x2,y2)代表一条线段的两个端点。\n\n---\n## 输出\n\n每组数据输出一行YES或者NO，表示输入的4条线段是否恰好围成矩形。\n\n---\n\n## 样例输入\n>3\n0 0 0 1\n1 0 1 1\n0 1 1 1\n1 0 0 0\n0 1 2 3\n1 0 3 2\n3 2 2 3\n1 0 0 1\n0 1 1 0\n1 0 2 0\n2 0 1 1\n1 1 0 1\n\n---\n\n## 样例输出\n>YES\nYES\nNO\n\n---\n\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n这道题目思路简单。首先判断给出的四条线段能不能组成四边形，如果可以，在判断这个四边形是不是矩形。 \n\n判断是不是四边形：\n输入了四条线段，总共有八个点。如果这八个点中，两两重合，总共有四个点，那么一定是一个四边形。判断八个点是不是两两重合，用set即可。set插入八个点，如果大小为四，那么就是两两重合。\n一个四边形，如果一条边和另外三条边要么平行，要么垂直，那么就是矩形。判断平行或垂直，用斜率即可。\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <vector>\n#include <string>\n#include <iostream>\n\nusing namespace std;\ntypedef long long LL;\nconst int min = 0x3f3f3f3f;\n#define mp make_pair\nnamespace Geometry {\n    struct Point {\n        int x, y;\n        Point() {}\n        Point(int _x, int _y):x(_x), y(_y) {};\n\n        bool operator < (const Point& p) const {\n            //优先判断横坐标\n            if(x<p.x || (x==p.x&&y<p.y))\n                return true;\n            return false;\n        }\n\n        bool operator == (const Point p) const {\n            return (x==p.x && y==p.y);\n        }\n    };\n\n    struct Line {\n        Point a, b;\n        double dis;\n        double k;\n        Line() {}\n        Line(Point _a, Point _b):a(_a), b(_b) {\n            dis = sqrt((_a.x-_b.x)*(_a.x-_b.x) + (_a.y-_b.y)*(_a.y-_b.y));\n        }\n    };\n\n    struct Vector {\n        Point a, b;\n        double dis;\n        Vector() {}\n        Vector(Point _a, Point _b):a(_a), b(_b) {\n            dis = sqrt((_a.x-_b.x)*(_a.x-_b.x) + (_a.y-_b.y)*(_a.y-_b.y));\n        }\n    };\n}\nusing namespace Geometry;\nbool JudgePoint(Line *l) {\n    set<Point> p;\n    for(int i=0; i<4; ++i) {\n        p.insert(l[i].a);\n        p.insert(l[i].b);\n    }\n    return (p.size() == 4);\n}\nbool JudgeRect(Line *l) {\n    for(int i=1; i<4; ++i) {\n        //判断是否垂直\n        if((l[0].a.y-l[0].b.y)*(l[i].a.y-l[i].b.y) == -(l[0].a.x-l[0].b.x)*(l[i].a.x-l[i].b.x))\n            continue;\n        //判断是否平行\n        if((l[0].a.y-l[0].b.y)*(l[i].a.x-l[i].b.x) == (l[0].a.x-l[0].b.x)*(l[i].a.y-l[i].b.y))\n            continue;\n        return false;\n    }\n    return true;\n}\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n    int T;\n    cin >> T;\n    while(T--) {\n        Line l[4];\n        int tmp1, tmp2, tmp3, tmp4;\n        for (int i = 0; i < 4; ++i) {\n            cin >> l[i].a.x >> l[i].a.y >> l[i].b.x >> l[i].b.y;\n        }\n        if(!JudgePoint(l)) {\n            cout << \"NO\" << endl;\n            continue;\n        } else if(!JudgeRect(l)) {\n            cout << \"NO\" << endl;\n            continue;\n        } else cout << \"YES\" << endl;\n    }\n    return 0;\n}\n\n\n```\n\n### Java\n```\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n    /*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n    */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        int[][] mat = new int[4][4];\n        while(T-- > 0) {\n            for(int i=0; i<4; ++i) {\n                for(int j=0; j<4; ++j) {\n                    mat[i][j] = in.nextInt();\n                }\n            }\n            if(!judgePoint(mat)) {\n                System.out.println(\"NO\");\n                continue;\n            }\n            if(!judgeRect(mat))\n                System.out.println(\"NO\");\n            else System.out.println(\"YES\");\n        }\n        in.close();\n    }\n\n    public static boolean judgePoint(int[][] mat) {\n        List<String> points = new ArrayList<String>();\n        for(int i=0; i<4; ++i) {\n            for(int j=0; j<4; j+=2) {\n                String point = String.valueOf(mat[i][j]) + \",\" + String.valueOf(mat[i][j+1]);\n                if(!points.contains(point)) {\n                    points.add(point);\n                }\n            }\n        }\n        return (points.size() == 4);\n    }\n\n    public static boolean judgeRect(int[][] mat) {\n        for(int i=1; i<4; ++i) {\n            //判断是否垂直\n            if((mat[0][1]-mat[0][3])*(mat[i][1]-mat[i][3]) == -(mat[0][0]-mat[0][2])*(mat[i][0]-mat[i][2])){\n                continue;\n            }\n            //判断是否平行\n            if((mat[0][1]-mat[0][3])*(mat[i][0]-mat[i][2]) == (mat[0][0]-mat[0][2])*(mat[i][1]-mat[i][3])) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}\n\n```","source":"_posts/hihoCoder-1040、矩形判断.md","raw":"---\ntitle: hihoCoder-1040、矩形判断\ndate: 2017-08-25 15:11:33\ntags:\n  - ACM\n  - 几何\n  - hiho\n---\n\n# [#1040 : 矩形判断](http://hihocoder.com/problemset/problem/1040)\n## 描述\n给出平面上4条线段，判断这4条线段是否恰好围成一个面积大于0的矩形。\n\n---\n## 输入\n输入第一行是一个整数T(1<=T<=100)，代表测试数据的数量。\n每组数据包含4行，每行包含4个整数x1, y1, x2, y2 (0 <= x1, y1, x2, y2 <= 100000)；其中(x1, y1), (x2,y2)代表一条线段的两个端点。\n\n---\n## 输出\n\n每组数据输出一行YES或者NO，表示输入的4条线段是否恰好围成矩形。\n\n---\n\n## 样例输入\n>3\n0 0 0 1\n1 0 1 1\n0 1 1 1\n1 0 0 0\n0 1 2 3\n1 0 3 2\n3 2 2 3\n1 0 0 1\n0 1 1 0\n1 0 2 0\n2 0 1 1\n1 1 0 1\n\n---\n\n## 样例输出\n>YES\nYES\nNO\n\n---\n\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n这道题目思路简单。首先判断给出的四条线段能不能组成四边形，如果可以，在判断这个四边形是不是矩形。 \n\n判断是不是四边形：\n输入了四条线段，总共有八个点。如果这八个点中，两两重合，总共有四个点，那么一定是一个四边形。判断八个点是不是两两重合，用set即可。set插入八个点，如果大小为四，那么就是两两重合。\n一个四边形，如果一条边和另外三条边要么平行，要么垂直，那么就是矩形。判断平行或垂直，用斜率即可。\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <vector>\n#include <string>\n#include <iostream>\n\nusing namespace std;\ntypedef long long LL;\nconst int min = 0x3f3f3f3f;\n#define mp make_pair\nnamespace Geometry {\n    struct Point {\n        int x, y;\n        Point() {}\n        Point(int _x, int _y):x(_x), y(_y) {};\n\n        bool operator < (const Point& p) const {\n            //优先判断横坐标\n            if(x<p.x || (x==p.x&&y<p.y))\n                return true;\n            return false;\n        }\n\n        bool operator == (const Point p) const {\n            return (x==p.x && y==p.y);\n        }\n    };\n\n    struct Line {\n        Point a, b;\n        double dis;\n        double k;\n        Line() {}\n        Line(Point _a, Point _b):a(_a), b(_b) {\n            dis = sqrt((_a.x-_b.x)*(_a.x-_b.x) + (_a.y-_b.y)*(_a.y-_b.y));\n        }\n    };\n\n    struct Vector {\n        Point a, b;\n        double dis;\n        Vector() {}\n        Vector(Point _a, Point _b):a(_a), b(_b) {\n            dis = sqrt((_a.x-_b.x)*(_a.x-_b.x) + (_a.y-_b.y)*(_a.y-_b.y));\n        }\n    };\n}\nusing namespace Geometry;\nbool JudgePoint(Line *l) {\n    set<Point> p;\n    for(int i=0; i<4; ++i) {\n        p.insert(l[i].a);\n        p.insert(l[i].b);\n    }\n    return (p.size() == 4);\n}\nbool JudgeRect(Line *l) {\n    for(int i=1; i<4; ++i) {\n        //判断是否垂直\n        if((l[0].a.y-l[0].b.y)*(l[i].a.y-l[i].b.y) == -(l[0].a.x-l[0].b.x)*(l[i].a.x-l[i].b.x))\n            continue;\n        //判断是否平行\n        if((l[0].a.y-l[0].b.y)*(l[i].a.x-l[i].b.x) == (l[0].a.x-l[0].b.x)*(l[i].a.y-l[i].b.y))\n            continue;\n        return false;\n    }\n    return true;\n}\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n    int T;\n    cin >> T;\n    while(T--) {\n        Line l[4];\n        int tmp1, tmp2, tmp3, tmp4;\n        for (int i = 0; i < 4; ++i) {\n            cin >> l[i].a.x >> l[i].a.y >> l[i].b.x >> l[i].b.y;\n        }\n        if(!JudgePoint(l)) {\n            cout << \"NO\" << endl;\n            continue;\n        } else if(!JudgeRect(l)) {\n            cout << \"NO\" << endl;\n            continue;\n        } else cout << \"YES\" << endl;\n    }\n    return 0;\n}\n\n\n```\n\n### Java\n```\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class Main {\n    /*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n    */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        int[][] mat = new int[4][4];\n        while(T-- > 0) {\n            for(int i=0; i<4; ++i) {\n                for(int j=0; j<4; ++j) {\n                    mat[i][j] = in.nextInt();\n                }\n            }\n            if(!judgePoint(mat)) {\n                System.out.println(\"NO\");\n                continue;\n            }\n            if(!judgeRect(mat))\n                System.out.println(\"NO\");\n            else System.out.println(\"YES\");\n        }\n        in.close();\n    }\n\n    public static boolean judgePoint(int[][] mat) {\n        List<String> points = new ArrayList<String>();\n        for(int i=0; i<4; ++i) {\n            for(int j=0; j<4; j+=2) {\n                String point = String.valueOf(mat[i][j]) + \",\" + String.valueOf(mat[i][j+1]);\n                if(!points.contains(point)) {\n                    points.add(point);\n                }\n            }\n        }\n        return (points.size() == 4);\n    }\n\n    public static boolean judgeRect(int[][] mat) {\n        for(int i=1; i<4; ++i) {\n            //判断是否垂直\n            if((mat[0][1]-mat[0][3])*(mat[i][1]-mat[i][3]) == -(mat[0][0]-mat[0][2])*(mat[i][0]-mat[i][2])){\n                continue;\n            }\n            //判断是否平行\n            if((mat[0][1]-mat[0][3])*(mat[i][0]-mat[i][2]) == (mat[0][0]-mat[0][2])*(mat[i][1]-mat[i][3])) {\n                continue;\n            }\n            return false;\n        }\n        return true;\n    }\n}\n\n```","slug":"hihoCoder-1040、矩形判断","published":1,"updated":"2018-01-04T03:32:16.821Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6cta000pig5nlg4j0oj9"},{"title":"hihoCoder-1326、有序01字符串","date":"2017-08-24T01:14:11.000Z","_content":"\n\n\n# [#1326 : 有序01字符串](http://hihocoder.com/problemset/problem/1326)\n## 描述\n对于一个01字符串，你每次可以将一个0修改成1，或者将一个1修改成0。那么，你最少需要修改多少次才能把一个01串 S 变为有序01字符串(有序01字符串是指满足所有0在所有1之前的01串)呢？\n\n---\n## 输入\n第一行是一个整数 T，代表测试数据的组数。(1 ≤ T ≤ 10)\n\n以下T行每行包含一个01串 S 。(1 ≤ |S| ≤ 1000)\n\n---\n## 输出\n对于每组测试数据输出最少需要修改的次数。\n\n---\n## 样例输入\n>3\n 000111\n 010001\n 100000 \n\n---\n\n## 样例输出\n>0\n 1\n 1\n\n---\n## 限制\n时间限制:10000ms  \n单点时限:1000ms  \n内存限制:256MB\n\n---\n## 思路\n最终总会按照某位分段，前面位0，后面为1。那么改动的次数，就是分段的那位前面的1的个数和后面的0的个数的和。统计每一位前面的1的个数个后面的0的个数，找出和的最小值，就可以了。不需要考虑这一位本身是1还是0，因为不管是0还是1都不需要改变。 比如：  \n> 字符串 ：        0 0 1 0 1 0 0 1 0 1 1 1 0 1  \n  前面的1的个数：   0 0 0 1 1 2 2 2 3 3 4 5 6 6  \n  后面的0的个数:    6 5 5 4 4 3 2 2 1 1 1 1 0 0  \n  个数和 ：         6 5 5 5 5 5 4 4 4 4 5 6 6 6  \n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int INF = 0x3f3f3f3f;\n\nint main() {\n    int T;\n    cin >> T;\n    while(T--) {\n        string s;\n        cin >> s;\n        int len = s.length();\n        int ans = INF;\n        int cnt0, cnt1;\n        for(int i=0; i<=len; ++i) {\n            cnt0 = cnt1 = 0;\n            for(int j=i-1; j>=0; --j)\n                cnt0 += s[j]=='0' ? 0:1;\n            for(int j=i; s[j]; ++j)\n                cnt1 += s[j]=='1' ? 0:1;\n            ans = min(ans, cnt0+cnt1);\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n\n### Java\n```\nimport java.util.Scanner;\n\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        while(T-- > 0) {\n            char[] list = in.next().toCharArray();\n            int l = list.length;\n            int cnt0, cnt1;\n            int ans = 0x3f3f3f3f;\n            for(int i=0; i<=l; ++i) {\n                cnt0 = cnt1 = 0;\n                for(int j=i-1; j>=0; --j) {\n                    if(list[j] == '0')\n                        cnt0 += 0;\n                    else cnt0 += 1;\n                }\n                for(int j=i; j<l; ++j) {\n                    if(list[j] == '1')\n                        cnt1 += 0;\n                    else cnt1 += 1;\n                }\n                if(ans > cnt0+cnt1)\n                    ans = cnt0+cnt1;\n            }\n            System.out.println(ans);\n        }\n        in.close();\n    }\n}\n```","source":"_posts/hihoCoder-1326-有序01字符串.md","raw":"---\ntitle: hihoCoder-1326、有序01字符串\ndate: 2017-08-24 09:14:11\ntags:\n  - ACM\n  - hiho\n  - 字符串\n---\n\n\n\n# [#1326 : 有序01字符串](http://hihocoder.com/problemset/problem/1326)\n## 描述\n对于一个01字符串，你每次可以将一个0修改成1，或者将一个1修改成0。那么，你最少需要修改多少次才能把一个01串 S 变为有序01字符串(有序01字符串是指满足所有0在所有1之前的01串)呢？\n\n---\n## 输入\n第一行是一个整数 T，代表测试数据的组数。(1 ≤ T ≤ 10)\n\n以下T行每行包含一个01串 S 。(1 ≤ |S| ≤ 1000)\n\n---\n## 输出\n对于每组测试数据输出最少需要修改的次数。\n\n---\n## 样例输入\n>3\n 000111\n 010001\n 100000 \n\n---\n\n## 样例输出\n>0\n 1\n 1\n\n---\n## 限制\n时间限制:10000ms  \n单点时限:1000ms  \n内存限制:256MB\n\n---\n## 思路\n最终总会按照某位分段，前面位0，后面为1。那么改动的次数，就是分段的那位前面的1的个数和后面的0的个数的和。统计每一位前面的1的个数个后面的0的个数，找出和的最小值，就可以了。不需要考虑这一位本身是1还是0，因为不管是0还是1都不需要改变。 比如：  \n> 字符串 ：        0 0 1 0 1 0 0 1 0 1 1 1 0 1  \n  前面的1的个数：   0 0 0 1 1 2 2 2 3 3 4 5 6 6  \n  后面的0的个数:    6 5 5 4 4 3 2 2 1 1 1 1 0 0  \n  个数和 ：         6 5 5 5 5 5 4 4 4 4 5 6 6 6  \n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <bits/stdc++.h>\n\nusing namespace std;\nconst int INF = 0x3f3f3f3f;\n\nint main() {\n    int T;\n    cin >> T;\n    while(T--) {\n        string s;\n        cin >> s;\n        int len = s.length();\n        int ans = INF;\n        int cnt0, cnt1;\n        for(int i=0; i<=len; ++i) {\n            cnt0 = cnt1 = 0;\n            for(int j=i-1; j>=0; --j)\n                cnt0 += s[j]=='0' ? 0:1;\n            for(int j=i; s[j]; ++j)\n                cnt1 += s[j]=='1' ? 0:1;\n            ans = min(ans, cnt0+cnt1);\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n\n### Java\n```\nimport java.util.Scanner;\n\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\npublic class Main {\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int T = in.nextInt();\n        while(T-- > 0) {\n            char[] list = in.next().toCharArray();\n            int l = list.length;\n            int cnt0, cnt1;\n            int ans = 0x3f3f3f3f;\n            for(int i=0; i<=l; ++i) {\n                cnt0 = cnt1 = 0;\n                for(int j=i-1; j>=0; --j) {\n                    if(list[j] == '0')\n                        cnt0 += 0;\n                    else cnt0 += 1;\n                }\n                for(int j=i; j<l; ++j) {\n                    if(list[j] == '1')\n                        cnt1 += 0;\n                    else cnt1 += 1;\n                }\n                if(ans > cnt0+cnt1)\n                    ans = cnt0+cnt1;\n            }\n            System.out.println(ans);\n        }\n        in.close();\n    }\n}\n```","slug":"hihoCoder-1326-有序01字符串","published":1,"updated":"2018-01-04T03:32:16.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6ctc000sig5n9lh8shyi"},{"title":"hihoCoder-1324、希尔伯特曲线","date":"2017-08-16T15:14:16.000Z","_content":"\n# [#1324 : 希尔伯特曲线](http://hihocoder.com/problemset/problem/1324)\n## 描述\n希尔伯特曲线是以下一系列分形曲线 Hn 的极限。我们可以把 Hn 看作一条覆盖 2n × 2n 方格矩阵的曲线，曲线上一共有 2n × 2n 个顶点(包括左下角起点和右下角终点)，恰好覆盖每个方格一次。\n\n![](/Img/2017/08/13/2017-08-13_23-42.png)\n\nHn(n > 1)可以通过如下方法构造：\n\n1. 将 Hn-1 顺时针旋转90度放在左下角\n\n2. 将 Hn-1 逆时针旋转90度放在右下角\n\n3. 将2个 Hn-1 分别放在左上角和右上角\n\n4. 用3条单位线段把4部分连接起来\n\n对于 Hn 上每一个顶点 p ，我们定义 p 的坐标是它覆盖的小方格在矩阵中的坐标，定义 p 的序号是它在曲线上从起点开始数第几个顶点。给定 p 的坐标，你能算出 p 的序号吗？ \n\n---\n## 输入\n输入包含3个整数 n , x , y 。 n 是分形曲线的阶数，(x, y)是 p 的坐标。\n\n1 ≤ n ≤ 30\n\n1 ≤ x, y ≤ 2n\n\n---\n## 输出\np 的序号。\n\n---\n\n## 样例输入\n3 6 1\n\n\n---\n\n## 样例输出\n60\n\n---\n\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n题目中已经说明Hn是由4个Hn-1旋转拼接而成，递归的结构非常明显。所以对于求Hn中(x, y)的序号，我们自然而然会想能否转化成在Hn-1中求(x', y')的序号。\n\n实际上我们只需要考虑Hn中的(x, y)是在左下、左上、右上、右下4个Hn-1中的哪一个里，即可转化成在Hn-1中求(x', y')序号的子问题。具体(x, y)到(x', y')的对应关系涉及到坐标平移和旋转，留给大家思考，不再赘述。\n\n![](/Img/2017/08/16/2017-08-16_19-30.png)\n\n以样例为例，如上图所示，H3中的(6, 1)在右下角的H2中，并且对应着H2中(4, 3)这个点。\n\n如果我们能正确求出H2中(4, 3)这个点的序号是12，又因为前3个H2中一共包含16x3=48个点，那么我们就能求出H3中的(6, 1)的序号是12+48=60。\n\n最后需要注意的是n=30时一共包含2^60个点，所以计算序号的时候需要用64位整型存储。\n\n\n### 坐标变换\n![](/Img/2017/08/24/20170824155059.jpg)\n如图，  \n当判断点实在当前图形的1位置时，需要将图像对于直线 x=y 进行翻折，即交换x，y的值。  \n当判断点实在当前图形的2位置时，只需将图像向下平移即可，即 x 不变，y-m。  \n当判断点实在当前图形的3位置时，同样是将图像平移至1位置即可，即  x-m, y-m。  \n当判断点实在当前图形的4位置时，先需要将图像平移至1位置,再将图像对于直线 x=-y 进行翻折，即 x=m+1-y, y=2*m+1-x。\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <bits/stdc++.h>\n#define LL long long\nusing namespace std;\nconst int INF = 0x3f3f3f3f;\nLL HilbertNumber(int n, int x, int y) {\n    if(n==0)\n        return 1;\n    int m = 1<<(n-1);\n\n    if(x<=m) {\n        if(y<=m)\n            return HilbertNumber(n-1, y, x);\n        else\n            return 1LL*m*m + HilbertNumber(n-1, x, y-m);\n    } else {\n        if(y>m)\n            return 2LL*m*m + HilbertNumber(n-1, x-m, y-m);\n        else\n            return 3LL*m*m + HilbertNumber(n-1, m+1-y, 2*m+1-x);\n    }\n}\nint main() {\n    int n, x, y;\n    cin >> n >> x >> y;\n    cout << HilbertNumber(n, x, y) << endl;\n    return 0;\n}\n```\n\n### Java\n```\nimport java.util.Scanner;\n\npublic class Main {\n    /*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n    */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int x = in.nextInt();\n        int y = in.nextInt();\n\n        System.out.println(HilbertNumber(n, x, y));\n        in.close();\n    }\n    public static long HilbertNumber(int n, int x, int y) {\n        if(n==0)\n            return 1;\n        int m = 1<<(n-1);\n\n        if(x<=m) {\n            if(y<=m)\n                return HilbertNumber(n-1, y, x);\n            else\n                return 1L*m*m + HilbertNumber(n-1, x, y-m);\n        } else {\n            if(y>m)\n                return 2L*m*m + HilbertNumber(n-1, x-m, y-m);\n            else\n                return 3L*m*m + HilbertNumber(n-1, m+1-y, 2*m+1-x);\n        }\n    }\n}\n```","source":"_posts/hihoCoder-1324-希尔伯特曲线.md","raw":"---\ntitle: hihoCoder-1324、希尔伯特曲线\ndate: 2017-08-16 23:14:16\ntags:\n  - ACM\n  - hiho\n  - 分治\n  - 几何\n---\n\n# [#1324 : 希尔伯特曲线](http://hihocoder.com/problemset/problem/1324)\n## 描述\n希尔伯特曲线是以下一系列分形曲线 Hn 的极限。我们可以把 Hn 看作一条覆盖 2n × 2n 方格矩阵的曲线，曲线上一共有 2n × 2n 个顶点(包括左下角起点和右下角终点)，恰好覆盖每个方格一次。\n\n![](/Img/2017/08/13/2017-08-13_23-42.png)\n\nHn(n > 1)可以通过如下方法构造：\n\n1. 将 Hn-1 顺时针旋转90度放在左下角\n\n2. 将 Hn-1 逆时针旋转90度放在右下角\n\n3. 将2个 Hn-1 分别放在左上角和右上角\n\n4. 用3条单位线段把4部分连接起来\n\n对于 Hn 上每一个顶点 p ，我们定义 p 的坐标是它覆盖的小方格在矩阵中的坐标，定义 p 的序号是它在曲线上从起点开始数第几个顶点。给定 p 的坐标，你能算出 p 的序号吗？ \n\n---\n## 输入\n输入包含3个整数 n , x , y 。 n 是分形曲线的阶数，(x, y)是 p 的坐标。\n\n1 ≤ n ≤ 30\n\n1 ≤ x, y ≤ 2n\n\n---\n## 输出\np 的序号。\n\n---\n\n## 样例输入\n3 6 1\n\n\n---\n\n## 样例输出\n60\n\n---\n\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n题目中已经说明Hn是由4个Hn-1旋转拼接而成，递归的结构非常明显。所以对于求Hn中(x, y)的序号，我们自然而然会想能否转化成在Hn-1中求(x', y')的序号。\n\n实际上我们只需要考虑Hn中的(x, y)是在左下、左上、右上、右下4个Hn-1中的哪一个里，即可转化成在Hn-1中求(x', y')序号的子问题。具体(x, y)到(x', y')的对应关系涉及到坐标平移和旋转，留给大家思考，不再赘述。\n\n![](/Img/2017/08/16/2017-08-16_19-30.png)\n\n以样例为例，如上图所示，H3中的(6, 1)在右下角的H2中，并且对应着H2中(4, 3)这个点。\n\n如果我们能正确求出H2中(4, 3)这个点的序号是12，又因为前3个H2中一共包含16x3=48个点，那么我们就能求出H3中的(6, 1)的序号是12+48=60。\n\n最后需要注意的是n=30时一共包含2^60个点，所以计算序号的时候需要用64位整型存储。\n\n\n### 坐标变换\n![](/Img/2017/08/24/20170824155059.jpg)\n如图，  \n当判断点实在当前图形的1位置时，需要将图像对于直线 x=y 进行翻折，即交换x，y的值。  \n当判断点实在当前图形的2位置时，只需将图像向下平移即可，即 x 不变，y-m。  \n当判断点实在当前图形的3位置时，同样是将图像平移至1位置即可，即  x-m, y-m。  \n当判断点实在当前图形的4位置时，先需要将图像平移至1位置,再将图像对于直线 x=-y 进行翻折，即 x=m+1-y, y=2*m+1-x。\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <bits/stdc++.h>\n#define LL long long\nusing namespace std;\nconst int INF = 0x3f3f3f3f;\nLL HilbertNumber(int n, int x, int y) {\n    if(n==0)\n        return 1;\n    int m = 1<<(n-1);\n\n    if(x<=m) {\n        if(y<=m)\n            return HilbertNumber(n-1, y, x);\n        else\n            return 1LL*m*m + HilbertNumber(n-1, x, y-m);\n    } else {\n        if(y>m)\n            return 2LL*m*m + HilbertNumber(n-1, x-m, y-m);\n        else\n            return 3LL*m*m + HilbertNumber(n-1, m+1-y, 2*m+1-x);\n    }\n}\nint main() {\n    int n, x, y;\n    cin >> n >> x >> y;\n    cout << HilbertNumber(n, x, y) << endl;\n    return 0;\n}\n```\n\n### Java\n```\nimport java.util.Scanner;\n\npublic class Main {\n    /*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n    */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        int x = in.nextInt();\n        int y = in.nextInt();\n\n        System.out.println(HilbertNumber(n, x, y));\n        in.close();\n    }\n    public static long HilbertNumber(int n, int x, int y) {\n        if(n==0)\n            return 1;\n        int m = 1<<(n-1);\n\n        if(x<=m) {\n            if(y<=m)\n                return HilbertNumber(n-1, y, x);\n            else\n                return 1L*m*m + HilbertNumber(n-1, x, y-m);\n        } else {\n            if(y>m)\n                return 2L*m*m + HilbertNumber(n-1, x-m, y-m);\n            else\n                return 3L*m*m + HilbertNumber(n-1, m+1-y, 2*m+1-x);\n        }\n    }\n}\n```","slug":"hihoCoder-1324-希尔伯特曲线","published":1,"updated":"2018-01-04T03:32:16.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6ctd000tig5n91l8w0us"},{"title":"hihoCoder - 1327、分隔相同字符","date":"2017-09-02T06:33:04.000Z","_content":"# [#1327 : 分隔相同字符](http://hihocoder.com/problemset/problem/1327)\n## 描述\n给定一个只包含小写字母'a'-'z'的字符串 S ，你需要将 S 中的字符重新排序，使得任意两个相同的字符不连在一起。\n\n如果有多个重排后字符串满足条件，输出字典序最小的一个。\n\n如果不存在满足条件的字符串，输出INVALID。\n\n---\n## 输入\n字符串S。(1 ≤ |S| ≤ 100000)\n\n---\n## 输出\n\n输出字典序最小的答案或者INVALID。\n\n---\n\n## 样例输入\n>aaabc\n\n---\n\n## 样例输出\n>abaca\n\n---\n\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n贪心，由题意易知VALID的充要条件即为此字母的长度小于整个字符串长度len/2向上取整。在每次贪心之后重新check新字符串是否VALID就可。\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntypedef long long LL;\nconst int min = 0x3f3f3f3f;\n#define ff(a, b, c, d) for(int a=b; a<c; a+=d)\n#define mm(a, b)       memset(a, b, sizeof(a))\n\nstring input;\nint cnt[26] = {0};\n\nbool check(int x) {\n    ff(i, 0, 26, 1)\n        if(cnt[i]>(x-1)/2+1)\n            return false;\n    return true;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n    cin >> input;\n    int len = input.size();\n    //cout << len << endl;\n    ff(i, 0, len, 1)\n        cnt[input[i]-'a']++;\n    if(!check(len)) {\n        cout << \"INVALID\" << endl;\n        return 0;\n    }\n/*\n    int pre = -1;\n    ff(i, 0, len, 1) {\n        ff(j, 0, 26, 1) {\n            if(cnt[j]>0 && j!=pre) {\n                cnt[j]--;\n                if(check(len-1)) {\n                    putchar('a'+j);\n                    pre = j;\n                    len--;\n                    break;\n                } else cnt[j]++;\n            }\n        }\n    }\n*/\n\n    int pre = -1;\n    ff(i, 0, input.size(), 1) {\n        ff(j, 0, 26, 1) {\n            if(cnt[j] && j!=pre) {\n                cnt[j]--;\n                if(check(len-1)) {\n                    putchar('a'+j);\n                    pre=j;\n                    len--;\n                    break;\n                }\n                else cnt[j]++;\n            }\n        }\n    }\n    cout << endl;\n    return 0;\n}\n\n\n\n```\n\n### Java\n```\nWriting...\n```","source":"_posts/hihoCoder-1327、分隔相同字符.md","raw":"---\ntitle: hihoCoder - 1327、分隔相同字符\ndate: 2017-09-02 14:33:04\ntags:\n - ACM\n - hiho\n - 贪心\n---\n# [#1327 : 分隔相同字符](http://hihocoder.com/problemset/problem/1327)\n## 描述\n给定一个只包含小写字母'a'-'z'的字符串 S ，你需要将 S 中的字符重新排序，使得任意两个相同的字符不连在一起。\n\n如果有多个重排后字符串满足条件，输出字典序最小的一个。\n\n如果不存在满足条件的字符串，输出INVALID。\n\n---\n## 输入\n字符串S。(1 ≤ |S| ≤ 100000)\n\n---\n## 输出\n\n输出字典序最小的答案或者INVALID。\n\n---\n\n## 样例输入\n>aaabc\n\n---\n\n## 样例输出\n>abaca\n\n---\n\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n贪心，由题意易知VALID的充要条件即为此字母的长度小于整个字符串长度len/2向上取整。在每次贪心之后重新check新字符串是否VALID就可。\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntypedef long long LL;\nconst int min = 0x3f3f3f3f;\n#define ff(a, b, c, d) for(int a=b; a<c; a+=d)\n#define mm(a, b)       memset(a, b, sizeof(a))\n\nstring input;\nint cnt[26] = {0};\n\nbool check(int x) {\n    ff(i, 0, 26, 1)\n        if(cnt[i]>(x-1)/2+1)\n            return false;\n    return true;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n    cin >> input;\n    int len = input.size();\n    //cout << len << endl;\n    ff(i, 0, len, 1)\n        cnt[input[i]-'a']++;\n    if(!check(len)) {\n        cout << \"INVALID\" << endl;\n        return 0;\n    }\n/*\n    int pre = -1;\n    ff(i, 0, len, 1) {\n        ff(j, 0, 26, 1) {\n            if(cnt[j]>0 && j!=pre) {\n                cnt[j]--;\n                if(check(len-1)) {\n                    putchar('a'+j);\n                    pre = j;\n                    len--;\n                    break;\n                } else cnt[j]++;\n            }\n        }\n    }\n*/\n\n    int pre = -1;\n    ff(i, 0, input.size(), 1) {\n        ff(j, 0, 26, 1) {\n            if(cnt[j] && j!=pre) {\n                cnt[j]--;\n                if(check(len-1)) {\n                    putchar('a'+j);\n                    pre=j;\n                    len--;\n                    break;\n                }\n                else cnt[j]++;\n            }\n        }\n    }\n    cout << endl;\n    return 0;\n}\n\n\n\n```\n\n### Java\n```\nWriting...\n```","slug":"hihoCoder-1327、分隔相同字符","published":1,"updated":"2018-01-04T03:32:16.822Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6cte000vig5nier6pc9w"},{"title":"hihoCoder - 1328、逃离迷宫","date":"2017-09-04T13:03:14.000Z","_content":"# [#1328 : 逃离迷宫](http://hihocoder.com/problemset/problem/1328)\n## 描述\n小Hi正处在由 N × M 个房间组成的矩阵迷宫中。为了描述方便，我们把左上角的房间的坐标定为(0, 0),右下角房间的坐标定为(N-1, M-1)。每个房间可能是3种状态之一：开放的、关闭的、或者上锁的。\n\n开放房间用'.'表示。小Hi可以从一个开放房间到达另一个相邻的(上下左右)开放房间。\n\n关闭房间用'#'表示。小Hi永远不能进入一个关闭的房间。\n\n上锁的房间用大写字母('A', 'B', 'C' ...)表示。小Hi在取得相应的钥匙前不能进入上锁的房间，而一旦取得钥匙就可以反复进入上锁的房间。每个房间的锁都是不同的，相应的钥匙在迷宫中的某一房间里，小Hi进入该房间就可以取得钥匙。\n\n小Hi一开始处于一个开放房间，坐标(a, b)。迷宫的出口是一个开放或者上锁的房间，坐标(c, d)。假设小Hi每移动到一个相邻房间需要花费单位1的时间，那么小Hi到达出口最少需要花费多少时间？\n\n---\n## 输入\n第一行包含7个整数: N , M , K , a , b , c , d . 其中N , M是矩阵的行列数；K 是上锁的房间数目，(a, b)是起始位置，(c, d)是出口位置。(1 ≤ N, M ≤ 100, 0 ≤ K ≤ 5, 0 ≤ a, c < N, 0 ≤ b, d < M)\n\n以下 N 行每行包含 M 个字符，表示迷宫矩阵。\n\n再以下 K 行每行两个整数 x, y，依次表示上锁房间A , B , C ....的钥匙所在房间坐标。(0 ≤ x < N, 0 ≤ y < M)\n\n---\n## 输出\n输出到达出口的最短时间。如果小Hi永远到达不了出口，输出-1。\n\n---\n## 样例输入\n>4 4 2 0 0 0 3\n.A.B\n.#..\n.#..\n.#..\n3 0\n3 3 \n\n---\n## 样例输出\n>15\n\n---\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n状态压缩。用v[x][y][k]表示在(x,y)这个点是否访问过，v[x][y][z]的值为当前所花的时间，k的二进制表示现在身上有多少个钥匙。\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntypedef long long LL;\nconst int min = 0x3f3f3f3f;\n#define ff(a, b, c, d) for(int a=b; a<c; a+=d)\n#define mm(a, b)       memset(a, b, sizeof(a))\n\ntypedef struct node{\n    int x, y, sum;\n};\nchar maps[105][105];\nint vis[105][105][1<<6];\nint dis[4][2] = {-1,0,0,-1,1,0,0,1};\nint n, m, k, sx, sy, ex, ey;\nvector<pair<int, int>> keys;\nbool check(int x, int y) {\n    if(x<0 || x>=n || y<0 || y>=n)\n        return false;\n    if(maps[x][y]=='#')\n        return false;\n\n    return true;\n}\nint bfs() {\n    mm(vis, 0);\n    vis[sx][sy][0] = 0;\n    queue <node> q;\n    q.push((node){sx, sy, 0});\n\n    while(!q.empty()) {\n        node now = q.front();\n        q.pop();\n        if(now.x==ex && now.y==ey)\n            return vis[now.x][now.y][now.sum];\n\n        ff(i, 0, 4, 1) {\n            int nx = now.x+dis[i][0];\n            int ny = now.y+dis[i][1];\n            if(!check(nx, ny))\n                continue;\n            if(maps[nx][ny]=='.' && vis[nx][ny][now.sum]==0) {\n                vis[nx][ny][now.sum] = vis[now.x][now.y][now.sum]+1;\n                q.push((node){nx, ny, now.sum});\n            } else if(isdigit(maps[nx][ny])) {\n                int sum = now.sum|(1<<(maps[nx][ny]-'0'));\n                if(vis[nx][ny][sum])\n                    continue;\n                vis[nx][ny][sum] = vis[now.x][now.y][now.sum] + 1;\n                q.push((node){nx, ny, sum});\n            } else if(isupper(maps[nx][ny])) {\n                if(now.sum&(1<<(maps[nx][ny]-'A')) && vis[nx][ny][now.sum]==0) {\n                    vis[nx][ny][now.sum] = vis[now.x][now.y][now.sum]  + 1;\n                    q.push((node){nx, ny, now.sum});\n                }\n            }\n        }\n    }\n    return -1;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n    cin >> n >> m >> k >> sx >> sy >> ex >> ey;\n    ff(i, 0, n, 1)\n        ff(j, 0, m, 1)\n            cin >> maps[i][j];\n\n    ff(i, 0, k, 1) {\n        int x, y;\n        cin >> x >> y;\n        keys.push_back({x, y});\n        maps[x][y] = '0' + i;\n    }\n    cout << bfs() << endl;\n    return 0;\n}\n\n\n```\n\n### Java\n```\nWritting...\n```","source":"_posts/hihoCoder-1328、逃离迷宫.md","raw":"---\ntitle: hihoCoder - 1328、逃离迷宫\ndate: 2017-09-04 21:03:14\n\ntags:\n - ACM\n - hiho\n - BFS\n - 状态压缩\n---\n# [#1328 : 逃离迷宫](http://hihocoder.com/problemset/problem/1328)\n## 描述\n小Hi正处在由 N × M 个房间组成的矩阵迷宫中。为了描述方便，我们把左上角的房间的坐标定为(0, 0),右下角房间的坐标定为(N-1, M-1)。每个房间可能是3种状态之一：开放的、关闭的、或者上锁的。\n\n开放房间用'.'表示。小Hi可以从一个开放房间到达另一个相邻的(上下左右)开放房间。\n\n关闭房间用'#'表示。小Hi永远不能进入一个关闭的房间。\n\n上锁的房间用大写字母('A', 'B', 'C' ...)表示。小Hi在取得相应的钥匙前不能进入上锁的房间，而一旦取得钥匙就可以反复进入上锁的房间。每个房间的锁都是不同的，相应的钥匙在迷宫中的某一房间里，小Hi进入该房间就可以取得钥匙。\n\n小Hi一开始处于一个开放房间，坐标(a, b)。迷宫的出口是一个开放或者上锁的房间，坐标(c, d)。假设小Hi每移动到一个相邻房间需要花费单位1的时间，那么小Hi到达出口最少需要花费多少时间？\n\n---\n## 输入\n第一行包含7个整数: N , M , K , a , b , c , d . 其中N , M是矩阵的行列数；K 是上锁的房间数目，(a, b)是起始位置，(c, d)是出口位置。(1 ≤ N, M ≤ 100, 0 ≤ K ≤ 5, 0 ≤ a, c < N, 0 ≤ b, d < M)\n\n以下 N 行每行包含 M 个字符，表示迷宫矩阵。\n\n再以下 K 行每行两个整数 x, y，依次表示上锁房间A , B , C ....的钥匙所在房间坐标。(0 ≤ x < N, 0 ≤ y < M)\n\n---\n## 输出\n输出到达出口的最短时间。如果小Hi永远到达不了出口，输出-1。\n\n---\n## 样例输入\n>4 4 2 0 0 0 3\n.A.B\n.#..\n.#..\n.#..\n3 0\n3 3 \n\n---\n## 样例输出\n>15\n\n---\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n状态压缩。用v[x][y][k]表示在(x,y)这个点是否访问过，v[x][y][z]的值为当前所花的时间，k的二进制表示现在身上有多少个钥匙。\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntypedef long long LL;\nconst int min = 0x3f3f3f3f;\n#define ff(a, b, c, d) for(int a=b; a<c; a+=d)\n#define mm(a, b)       memset(a, b, sizeof(a))\n\ntypedef struct node{\n    int x, y, sum;\n};\nchar maps[105][105];\nint vis[105][105][1<<6];\nint dis[4][2] = {-1,0,0,-1,1,0,0,1};\nint n, m, k, sx, sy, ex, ey;\nvector<pair<int, int>> keys;\nbool check(int x, int y) {\n    if(x<0 || x>=n || y<0 || y>=n)\n        return false;\n    if(maps[x][y]=='#')\n        return false;\n\n    return true;\n}\nint bfs() {\n    mm(vis, 0);\n    vis[sx][sy][0] = 0;\n    queue <node> q;\n    q.push((node){sx, sy, 0});\n\n    while(!q.empty()) {\n        node now = q.front();\n        q.pop();\n        if(now.x==ex && now.y==ey)\n            return vis[now.x][now.y][now.sum];\n\n        ff(i, 0, 4, 1) {\n            int nx = now.x+dis[i][0];\n            int ny = now.y+dis[i][1];\n            if(!check(nx, ny))\n                continue;\n            if(maps[nx][ny]=='.' && vis[nx][ny][now.sum]==0) {\n                vis[nx][ny][now.sum] = vis[now.x][now.y][now.sum]+1;\n                q.push((node){nx, ny, now.sum});\n            } else if(isdigit(maps[nx][ny])) {\n                int sum = now.sum|(1<<(maps[nx][ny]-'0'));\n                if(vis[nx][ny][sum])\n                    continue;\n                vis[nx][ny][sum] = vis[now.x][now.y][now.sum] + 1;\n                q.push((node){nx, ny, sum});\n            } else if(isupper(maps[nx][ny])) {\n                if(now.sum&(1<<(maps[nx][ny]-'A')) && vis[nx][ny][now.sum]==0) {\n                    vis[nx][ny][now.sum] = vis[now.x][now.y][now.sum]  + 1;\n                    q.push((node){nx, ny, now.sum});\n                }\n            }\n        }\n    }\n    return -1;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n    cin >> n >> m >> k >> sx >> sy >> ex >> ey;\n    ff(i, 0, n, 1)\n        ff(j, 0, m, 1)\n            cin >> maps[i][j];\n\n    ff(i, 0, k, 1) {\n        int x, y;\n        cin >> x >> y;\n        keys.push_back({x, y});\n        maps[x][y] = '0' + i;\n    }\n    cout << bfs() << endl;\n    return 0;\n}\n\n\n```\n\n### Java\n```\nWritting...\n```","slug":"hihoCoder-1328、逃离迷宫","published":1,"updated":"2018-01-04T03:32:16.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6ctf000xig5nhif9aa9k"},{"title":"hihoCoder - 1330、数组重排","date":"2017-09-12T06:39:29.000Z","_content":"# [#1330 : 数组重排](http://hihocoder.com/problemset/problem/1330)\n## 描述\n小Hi想知道，如果他每次都按照一种固定的顺序重排数组，那么最少经过几次重排之后数组会恢复初始的顺序？\n\n具体来讲，给定一个1 - N 的排列 P，小Hi每次重排都是把第 i 个元素放到第 Pi个位置上。例如对于 P = (2, 3, 1)，假设初始数组是(1, 2, 3)，重排一次之后变为(3, 1, 2)，重排两次之后变为(2, 3, 1)，重排三次之后变回(1, 2, 3)。\n\n被排数组中的元素可以认为是两两不同的。\n\n---\n## 输入\n第一行一个整数 N ，代表数组的长度。 (1 ≤ N ≤ 100)\n\n第二行N个整数，代表1 - N 的一个排列 P 。\n\n---\n## 输出\n输出最少重排的次数。\n\n---\n## 样例输入\n>3\n 2 3 1\n\n---\n## 样例输出\n>3\n\n\n---\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n对于每一个点分别通过模拟得出最小步骤，再求每个最小步骤的最小公倍数。\n\n---\n## 题解\n\n### C++\n```\n/*\nAuthor: Yuki\nGitHub: https://github.com/Yuki-14544869/\nBlog:   https://yuki4294967295.cn/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <cctype>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <utility>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#pragma comment(linker, \"/STACK:1024000000,1024000000\") //手动扩栈\ntypedef long long LL;\n#define eps 1e-10\n#define ff(a, b, c, d) for (int a = b; a < c; a += d)\n#define fff(a, b, c, d) for (int a = b; a >= c; a -= d)\n#define mm(a, b) memset(a, b, sizeof a)\nconst double PIE = acos(-1.0);\nconst int INF = 0x3f3f3f3f;\nnamespace IO {\nconst int MX = 4e7;\nchar buf[MX];\nint c, sz;\nvoid init() {\n    c = 0;\n    sz = fread(buf, 1, MX, stdin);\n}\ninline bool II(int &t) {\n    while(c < sz && buf[c] != '-' && (buf[c] < '0' || buf[c] > '9')) c++;\n    if(c >= sz) return false;\n    bool flag = 0;\n    if(buf[c] == '-') flag = 1, c++;\n    for(t = 0; c < sz && '0' <= buf[c] && buf[c] <= '9'; c++) t = t * 10 + buf[c] - '0';\n    if(flag) t = -t;\n    return true;\n}\n}\nusing namespace IO;\nvoid filein() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n}\n\nint N;\nint p[105] = {0};\n\nLL GCD(LL a, LL b) {\n    LL tmp = a%b;\n    if(tmp == 0)\n        return b;\n    return GCD(b, tmp);\n}\n\nLL LCM(LL a, LL b) {\n    return a*b / GCD(a, b);\n}\nint main() {\n    //ios::sync_with_stdio(false);\n    filein();\n    //init();\n    //II(N);\n    while(~scanf(\"%d\", &N)) {\n        mm(p, 0);\n        ff(i, 1, N+1, 1) {\n            scanf(\"%d\", &p[i]);\n        }\n        LL ans = 1;\n        for(LL i=1; i<=N; ++i) {\n            LL tmp = p[i];\n            LL cnt = 1;\n            while(tmp!=i) {\n                tmp = p[tmp];\n                cnt++;\n            }\n            ans = LCM(ans, cnt);\n        }\n        printf(\"%lld\\n\", ans);\n    }\n\n\n\n//    ff(i, 1, N+1, 1) {\n//        cout << p[i] << endl;\n//    }\n\n    return 0;\n}\n\n```\n\n### Java\n```\nWritting...\n```","source":"_posts/hihoCoder-1330、数组重排.md","raw":"---\ntitle: hihoCoder - 1330、数组重排\ndate: 2017-09-12 14:39:29\n\ntags:\n - ACM\n - hiho\n---\n# [#1330 : 数组重排](http://hihocoder.com/problemset/problem/1330)\n## 描述\n小Hi想知道，如果他每次都按照一种固定的顺序重排数组，那么最少经过几次重排之后数组会恢复初始的顺序？\n\n具体来讲，给定一个1 - N 的排列 P，小Hi每次重排都是把第 i 个元素放到第 Pi个位置上。例如对于 P = (2, 3, 1)，假设初始数组是(1, 2, 3)，重排一次之后变为(3, 1, 2)，重排两次之后变为(2, 3, 1)，重排三次之后变回(1, 2, 3)。\n\n被排数组中的元素可以认为是两两不同的。\n\n---\n## 输入\n第一行一个整数 N ，代表数组的长度。 (1 ≤ N ≤ 100)\n\n第二行N个整数，代表1 - N 的一个排列 P 。\n\n---\n## 输出\n输出最少重排的次数。\n\n---\n## 样例输入\n>3\n 2 3 1\n\n---\n## 样例输出\n>3\n\n\n---\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n对于每一个点分别通过模拟得出最小步骤，再求每个最小步骤的最小公倍数。\n\n---\n## 题解\n\n### C++\n```\n/*\nAuthor: Yuki\nGitHub: https://github.com/Yuki-14544869/\nBlog:   https://yuki4294967295.cn/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <cctype>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <utility>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#pragma comment(linker, \"/STACK:1024000000,1024000000\") //手动扩栈\ntypedef long long LL;\n#define eps 1e-10\n#define ff(a, b, c, d) for (int a = b; a < c; a += d)\n#define fff(a, b, c, d) for (int a = b; a >= c; a -= d)\n#define mm(a, b) memset(a, b, sizeof a)\nconst double PIE = acos(-1.0);\nconst int INF = 0x3f3f3f3f;\nnamespace IO {\nconst int MX = 4e7;\nchar buf[MX];\nint c, sz;\nvoid init() {\n    c = 0;\n    sz = fread(buf, 1, MX, stdin);\n}\ninline bool II(int &t) {\n    while(c < sz && buf[c] != '-' && (buf[c] < '0' || buf[c] > '9')) c++;\n    if(c >= sz) return false;\n    bool flag = 0;\n    if(buf[c] == '-') flag = 1, c++;\n    for(t = 0; c < sz && '0' <= buf[c] && buf[c] <= '9'; c++) t = t * 10 + buf[c] - '0';\n    if(flag) t = -t;\n    return true;\n}\n}\nusing namespace IO;\nvoid filein() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n}\n\nint N;\nint p[105] = {0};\n\nLL GCD(LL a, LL b) {\n    LL tmp = a%b;\n    if(tmp == 0)\n        return b;\n    return GCD(b, tmp);\n}\n\nLL LCM(LL a, LL b) {\n    return a*b / GCD(a, b);\n}\nint main() {\n    //ios::sync_with_stdio(false);\n    filein();\n    //init();\n    //II(N);\n    while(~scanf(\"%d\", &N)) {\n        mm(p, 0);\n        ff(i, 1, N+1, 1) {\n            scanf(\"%d\", &p[i]);\n        }\n        LL ans = 1;\n        for(LL i=1; i<=N; ++i) {\n            LL tmp = p[i];\n            LL cnt = 1;\n            while(tmp!=i) {\n                tmp = p[tmp];\n                cnt++;\n            }\n            ans = LCM(ans, cnt);\n        }\n        printf(\"%lld\\n\", ans);\n    }\n\n\n\n//    ff(i, 1, N+1, 1) {\n//        cout << p[i] << endl;\n//    }\n\n    return 0;\n}\n\n```\n\n### Java\n```\nWritting...\n```","slug":"hihoCoder-1330、数组重排","published":1,"updated":"2018-01-04T03:32:16.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6ctg0010ig5nkxwjl0ek"},{"title":"hihoCoder - 1356、分隔相同整数","date":"2017-09-02T12:30:50.000Z","_content":"# [#1356 : 分隔相同整数](http://hihocoder.com/problemset/problem/1356)\n## 描述\n给定一个包含N个整数的数组A。你的任务是将A重新排列，使得任意两个相等的整数在数组中都不相邻。  \n\n如果存在多个重排后的数组满足条件，输出字典序最小的数组。  \n\n这里字典序最小指：首先尽量使第一个整数最小，其次使第二个整数最小，以此类推。\n\n---\n## 输入\n第一行包含一个整数N，表示数组的长度。(1 <= N <= 100000)  \n\n第二行包含N个整数，依次是 A1, A2, ... AN。(1 <= Ai <= 1000000000)\n\n---\n## 输出\n输出字典序最小的重排数组。如果这样的数组不存在，输出-1。\n\n---\n## 样例输入\n>4  \n2 1 3 3\n\n---\n## 样例输出\n>1 3 2 3\n\n---\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n与[#1327 : 分隔相同字符](http://hihocoder.com/problemset/problem/1327)思路类似，只不过因为数据量变大了，无法在时间限制内将数组遍历，于是考虑到了STL用以查询，维护一个二元组（x, y）。有以下集中操作：\n1. 插入/删除/修改其中某个元素（x，y）\n2. 查询x的最大值\n3. 查询y最大的二元组中x最小&次小的那个\n4. 查询x最小的二元组\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki4294967295.cn/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntypedef long long LL;\nconst int min = 0x3f3f3f3f;\n#define ff(a, b, c, d) for(int a=b; a<c; a+=d)\n#define mm(a, b)       memset(a, b, sizeof(a))\n\n\nint N;\nmap<int, int> cnt;\ntypedef pair<int, int> p;\nset<p, greater<p> > s;\n\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n    cin >> N;\n    int x;\n    ff(i, 0, N, 1) {\n        cin >> x;\n        cnt[x]++;\n    }\n\n    for(auto& x : cnt) {\n        s.insert({x.second, -x.first});\n    }\n\n//    for(auto&x : cnt) {\n//        cout << x.first << \" \" << x.second << endl;\n//    }\n\n    if(s.begin()->first > (N-1)/2+1) {\n        cout << \"-1\" << endl;\n        return 0;\n    }\n    //cout << \"out : \" << N << endl;\n    for(int res, pre=0; N--; pre=res) {\n        //cout << N << endl;\n        int temp = s.begin()->first;\n        if(temp > (N-1)/2+1) {\n            auto it = s.begin();\n            if(it->second == pre)\n                it++;\n            res = -it->second;\n            if(it->first==1)\n                cnt.erase(res);\n            else {\n                s.insert({it->first-1, it->second});\n                cnt[res]--;\n            }\n            s.erase(it);\n        } else {\n            auto it = cnt.begin();\n            if(it->first==pre)\n                it++;\n            res = it->first;\n            s.erase({it->second, -res});\n            if(it->second==1)\n                cnt.erase(it);\n            else {\n                it->second--;\n                s.insert({it->second, -res});\n            }\n        }\n        cout << res << ' ';\n    }\n    cout << endl;\n    return 0;\n}\n\n\n```\n\n### Java\n```\nWritting...\n```\n\n## 参考材料\n[hihocoder 1356 分隔相同整数](http://www.cnblogs.com/Patt/p/5747698.html)","source":"_posts/hihoCoder-1356、分隔相同整数.md","raw":"---\ntitle: hihoCoder - 1356、分隔相同整数\ndate: 2017-09-02 20:30:50\ntags:\n - ACM\n - hiho\n - 贪心\n---\n# [#1356 : 分隔相同整数](http://hihocoder.com/problemset/problem/1356)\n## 描述\n给定一个包含N个整数的数组A。你的任务是将A重新排列，使得任意两个相等的整数在数组中都不相邻。  \n\n如果存在多个重排后的数组满足条件，输出字典序最小的数组。  \n\n这里字典序最小指：首先尽量使第一个整数最小，其次使第二个整数最小，以此类推。\n\n---\n## 输入\n第一行包含一个整数N，表示数组的长度。(1 <= N <= 100000)  \n\n第二行包含N个整数，依次是 A1, A2, ... AN。(1 <= Ai <= 1000000000)\n\n---\n## 输出\n输出字典序最小的重排数组。如果这样的数组不存在，输出-1。\n\n---\n## 样例输入\n>4  \n2 1 3 3\n\n---\n## 样例输出\n>1 3 2 3\n\n---\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n与[#1327 : 分隔相同字符](http://hihocoder.com/problemset/problem/1327)思路类似，只不过因为数据量变大了，无法在时间限制内将数组遍历，于是考虑到了STL用以查询，维护一个二元组（x, y）。有以下集中操作：\n1. 插入/删除/修改其中某个元素（x，y）\n2. 查询x的最大值\n3. 查询y最大的二元组中x最小&次小的那个\n4. 查询x最小的二元组\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki4294967295.cn/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntypedef long long LL;\nconst int min = 0x3f3f3f3f;\n#define ff(a, b, c, d) for(int a=b; a<c; a+=d)\n#define mm(a, b)       memset(a, b, sizeof(a))\n\n\nint N;\nmap<int, int> cnt;\ntypedef pair<int, int> p;\nset<p, greater<p> > s;\n\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n    cin >> N;\n    int x;\n    ff(i, 0, N, 1) {\n        cin >> x;\n        cnt[x]++;\n    }\n\n    for(auto& x : cnt) {\n        s.insert({x.second, -x.first});\n    }\n\n//    for(auto&x : cnt) {\n//        cout << x.first << \" \" << x.second << endl;\n//    }\n\n    if(s.begin()->first > (N-1)/2+1) {\n        cout << \"-1\" << endl;\n        return 0;\n    }\n    //cout << \"out : \" << N << endl;\n    for(int res, pre=0; N--; pre=res) {\n        //cout << N << endl;\n        int temp = s.begin()->first;\n        if(temp > (N-1)/2+1) {\n            auto it = s.begin();\n            if(it->second == pre)\n                it++;\n            res = -it->second;\n            if(it->first==1)\n                cnt.erase(res);\n            else {\n                s.insert({it->first-1, it->second});\n                cnt[res]--;\n            }\n            s.erase(it);\n        } else {\n            auto it = cnt.begin();\n            if(it->first==pre)\n                it++;\n            res = it->first;\n            s.erase({it->second, -res});\n            if(it->second==1)\n                cnt.erase(it);\n            else {\n                it->second--;\n                s.insert({it->second, -res});\n            }\n        }\n        cout << res << ' ';\n    }\n    cout << endl;\n    return 0;\n}\n\n\n```\n\n### Java\n```\nWritting...\n```\n\n## 参考材料\n[hihocoder 1356 分隔相同整数](http://www.cnblogs.com/Patt/p/5747698.html)","slug":"hihoCoder-1356、分隔相同整数","published":1,"updated":"2018-01-04T03:32:16.823Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6cth0012ig5n2t2ktagp"},{"title":"hihoCoder - 1519、逃离迷宫II ","date":"2017-09-05T13:42:14.000Z","_content":"# [#1519 : 逃离迷宫II](http://hihocoder.com/problemset/problem/1519)\n## 描述\n小Hi被坏女巫抓进里一间有N x M个格子组成的矩阵迷宫。\n\n有些格子是小Hi可以经过的，我们用'.'表示；有些格子上有障碍物小Hi不能经过，我们用'#'表示。小Hi的起始位置用'S'表示，他需要到达用'T'表示的格子才能逃离迷宫。\n\n麻烦的是小Hi被坏女巫施了魔法，他只能选择上下左右某一个方向，沿着这个方向一直走，直到遇到障碍物或者迷宫边界才能改变方向。新的方向可以是上下左右四个方向之一。之后他还是只能沿着新的方向一直走直到再次遇到障碍物或者迷宫边界……  \n\n小Hi想知道他最少改变几次方向才能逃离这个迷宫。\n\n---\n## 输入\n第一行包含两个整数N和M。  (1 <= N, M <= 500)  \n\n以下N行每行M个字符，代表迷宫。\n\n---\n## 输出\n一个整数代表答案。如果小Hi没法逃离迷宫，输出-1。\n\n---\n## 样例输入\n>5 5\nS.#.T  \n.....  \n.....  \n.....  \n.....\n\n---\n## 样例输出\n>2\n\n---\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\nBFS。往当前方向一直走到无路可走在转弯，一直重复。在节点内用flag标记当前转弯次数。\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntypedef long long LL;\nconst int min = 0x3f3f3f3f;\n#define ff(a, b, c, d) for(int a=b; a<c; a+=d)\n#define mm(a, b)       memset(a, b, sizeof(a))\nnamespace BFS {\n    int n, m;\n    char maps[505][505];\n    bool vis[505][505] = {false};\n    int ans[505][505] = {0};\n    int sx, sy, ex, ey;\n    int dis[4][2] = {-1,0,0,-1,1,0,0,1};//0左1上2右3下\n    struct node {\n        int x, y;\n        int cnt;\n        node(int _x, int _y, int _cnt):x(_x),y(_y),cnt(_cnt){}\n    };\n    bool check(int x, int y) {\n        if(x<0 || x>=n || y<0 || y>=m)\n            return false;\n        return maps[x][y] != '#';\n    }\n    void init() {\n        cin >> n >> m;\n        ff(i, 0, n, 1)\n            ff(j, 0, m, 1) {\n                cin >> maps[i][j];\n                if(maps[i][j]=='S')\n                    sx=i, sy=j;\n                else if(maps[i][j]=='T')\n                    ex=i, ey=j;\n            }\n    }\n    int bfs() {\n        vis[sx][sy] = true;\n        queue<node> q;\n        q.push({sx, sy, 0});\n\n        while(!q.empty()) {\n            node now = q.front();\n            q.pop();\n\n            ff(i, 0, 4, 1) {\n                //cout << now.x << \" \" << now.y << endl;\n                int x = now.x + dis[i][0];\n                int y = now.y + dis[i][1];\n                //cout << x << \" \" << y << endl;\n                if(!check(x, y))\n                    continue;\n                if(maps[x][y] == 'T')\n                    return now.cnt;\n                while(check(x+dis[i][0], y+dis[i][1])) {\n                    x += dis[i][0];\n                    y += dis[i][1];\n\n                    if(x==ex && y==ey)\n                        return now.cnt;\n                }\n                if(!vis[x][y]) {\n                    int cnt = now.cnt + 1;\n                    q.push((node){x, y, cnt});\n                    vis[x][y] = true;\n                }\n            }\n        }\n        return -1;\n    }\n}\nusing namespace BFS;\nvoid intxt() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n}\nint main() {\n    intxt();\n    init();\n//    cout << n << \" \" << m << endl;\n//    ff(i, 0, n, 1) {\n//        ff(j, 0, m, 1)cout << maps[i][j];\n//        cout << endl;\n//    }\n//    cout << sx << \" \" << sy << endl\n//         << ex << \" \" << ey << endl;\n    cout << bfs() << endl;\n    return 0;\n}\n\n\n```\n\n### Java\n```\nWritting...\n```","source":"_posts/hihoCoder-1519、逃离迷宫II.md","raw":"---\ntitle: 'hihoCoder - 1519、逃离迷宫II '\ndate: 2017-09-05 21:42:14\n\ntags:\n - ACM\n - hiho\n - BFS\n---\n# [#1519 : 逃离迷宫II](http://hihocoder.com/problemset/problem/1519)\n## 描述\n小Hi被坏女巫抓进里一间有N x M个格子组成的矩阵迷宫。\n\n有些格子是小Hi可以经过的，我们用'.'表示；有些格子上有障碍物小Hi不能经过，我们用'#'表示。小Hi的起始位置用'S'表示，他需要到达用'T'表示的格子才能逃离迷宫。\n\n麻烦的是小Hi被坏女巫施了魔法，他只能选择上下左右某一个方向，沿着这个方向一直走，直到遇到障碍物或者迷宫边界才能改变方向。新的方向可以是上下左右四个方向之一。之后他还是只能沿着新的方向一直走直到再次遇到障碍物或者迷宫边界……  \n\n小Hi想知道他最少改变几次方向才能逃离这个迷宫。\n\n---\n## 输入\n第一行包含两个整数N和M。  (1 <= N, M <= 500)  \n\n以下N行每行M个字符，代表迷宫。\n\n---\n## 输出\n一个整数代表答案。如果小Hi没法逃离迷宫，输出-1。\n\n---\n## 样例输入\n>5 5\nS.#.T  \n.....  \n.....  \n.....  \n.....\n\n---\n## 样例输出\n>2\n\n---\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\nBFS。往当前方向一直走到无路可走在转弯，一直重复。在节点内用flag标记当前转弯次数。\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntypedef long long LL;\nconst int min = 0x3f3f3f3f;\n#define ff(a, b, c, d) for(int a=b; a<c; a+=d)\n#define mm(a, b)       memset(a, b, sizeof(a))\nnamespace BFS {\n    int n, m;\n    char maps[505][505];\n    bool vis[505][505] = {false};\n    int ans[505][505] = {0};\n    int sx, sy, ex, ey;\n    int dis[4][2] = {-1,0,0,-1,1,0,0,1};//0左1上2右3下\n    struct node {\n        int x, y;\n        int cnt;\n        node(int _x, int _y, int _cnt):x(_x),y(_y),cnt(_cnt){}\n    };\n    bool check(int x, int y) {\n        if(x<0 || x>=n || y<0 || y>=m)\n            return false;\n        return maps[x][y] != '#';\n    }\n    void init() {\n        cin >> n >> m;\n        ff(i, 0, n, 1)\n            ff(j, 0, m, 1) {\n                cin >> maps[i][j];\n                if(maps[i][j]=='S')\n                    sx=i, sy=j;\n                else if(maps[i][j]=='T')\n                    ex=i, ey=j;\n            }\n    }\n    int bfs() {\n        vis[sx][sy] = true;\n        queue<node> q;\n        q.push({sx, sy, 0});\n\n        while(!q.empty()) {\n            node now = q.front();\n            q.pop();\n\n            ff(i, 0, 4, 1) {\n                //cout << now.x << \" \" << now.y << endl;\n                int x = now.x + dis[i][0];\n                int y = now.y + dis[i][1];\n                //cout << x << \" \" << y << endl;\n                if(!check(x, y))\n                    continue;\n                if(maps[x][y] == 'T')\n                    return now.cnt;\n                while(check(x+dis[i][0], y+dis[i][1])) {\n                    x += dis[i][0];\n                    y += dis[i][1];\n\n                    if(x==ex && y==ey)\n                        return now.cnt;\n                }\n                if(!vis[x][y]) {\n                    int cnt = now.cnt + 1;\n                    q.push((node){x, y, cnt});\n                    vis[x][y] = true;\n                }\n            }\n        }\n        return -1;\n    }\n}\nusing namespace BFS;\nvoid intxt() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n}\nint main() {\n    intxt();\n    init();\n//    cout << n << \" \" << m << endl;\n//    ff(i, 0, n, 1) {\n//        ff(j, 0, m, 1)cout << maps[i][j];\n//        cout << endl;\n//    }\n//    cout << sx << \" \" << sy << endl\n//         << ex << \" \" << ey << endl;\n    cout << bfs() << endl;\n    return 0;\n}\n\n\n```\n\n### Java\n```\nWritting...\n```","slug":"hihoCoder-1519、逃离迷宫II","published":1,"updated":"2018-01-04T03:32:16.824Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6cti0013ig5no9l2o6q0"},{"title":"为何程序员喜欢将 INF 设置为 0x3f3f3f3f ？(转)","date":"2017-08-23T08:48:45.000Z","_content":"在**算法**竞赛中，我们常常需要用到一个“无穷大”的值，对于我来说，大多数时间我会根据具体问题取一个99999999之类的数（显得很不专业啊！）\n\n在网上看别人代码的时候，经常会看到他们把INF设为 0x7fffffff ，奇怪为什么设一个这么奇怪的十六进制数，一查才知道，因为这是 32-bit int 的最大值。如果这个无穷大只用于一般的比较（比如求最小值时 min 变量的初值），那么 0x7fffffff 确实是一个完美的选择。\n\n但是更多情况下， 0x7fffffff 并不是一个好的选择，比如在最短路径算法中，我们使用松弛操作：\n```\nif(d[u]+w[u][v]<d[v]) \n    d[v]=d[u]+w[u][v];\n```\n如果 u,v 之间没有边，那么 w[u][v]=INF ，如果我们的 INF 取 0x7fffffff ，那么 d[u]+w[u][v] 会溢出而变成负数，我们的松弛操作便出错了！\n\n准确来说， 0x7fffffff 不能满足“无穷大加一个有穷的数依然是无穷大”这个条件，它会变成了一个很小的负数。\n\n更进一步的，如果有一个数能够满足“无穷大加无穷大依然是无穷大”，那么就更好了！\n\n前阵子无意中看到了一个不一样的取值， INF=0x3f3f3f3f ，这时我又郁闷了，这个值又代表的是什么？于是我去寻找答案，发现这个值的设置真的很精妙！\n\n0x3f3f3f3f的十进制是1061109567，是10^9级别的（和0x7fffffff一个数量级），而一般场合下的数据都是小于10^9的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。 \n\n另一方面，由于一般的数据都不会大于10^9，所以当我们把无穷大加上一个数据时，它并不会溢出（这就满足了“无穷大加一个有穷的数依然是无穷大”），事实上 0x3f3f3f3f+0x3f3f3f3f=2122219134 ，这非常大但却没有超过32-bit int 的表示范围，所以 0x3f3f3f3f 还满足了我们“无穷大加无穷大还是无穷大”的需求。\n\n最后，0x3f3f3f3f还能给我们带来一个意想不到的额外好处：   \n如果我们想要将某个数组清零，我们通常会使用memset(a,0,sizeof(a))，方便又高效，但是当我们想将某个数组全部赋值为无穷大时，就不能使用memset函数而得自己写循环了，因为memset是按字节操作的，它能够对数组清零是因为0的每个字节都是0（一般我们只有赋值为-1和0的时候才使用它）。现在好了，如果我们将无穷大设为0x3f3f3f3f，那么奇迹就发生了，0x3f3f3f3f的每个字节都是0x3f！所以要把一段内存全部置为无穷大，我们只需要memset(a,0x3f,sizeof(a))。\n\n所以在通常的场合下，0x3f3f3f3f真的是一个非常棒的选择！\n\n# 参考资料\n[【算法设计与数据结构】为何程序员喜欢将INF设置为0x3f3f3f3f？](http://blog.csdn.net/jiange_zh/article/details/50198097)","source":"_posts/为何程序员喜欢将INF设置为0x3f3f3f3f？.md","raw":"---\ntitle: 为何程序员喜欢将 INF 设置为 0x3f3f3f3f ？(转)\ndate: 2017-08-23 16:48:45\ntags:\n  - C++\n---\n在**算法**竞赛中，我们常常需要用到一个“无穷大”的值，对于我来说，大多数时间我会根据具体问题取一个99999999之类的数（显得很不专业啊！）\n\n在网上看别人代码的时候，经常会看到他们把INF设为 0x7fffffff ，奇怪为什么设一个这么奇怪的十六进制数，一查才知道，因为这是 32-bit int 的最大值。如果这个无穷大只用于一般的比较（比如求最小值时 min 变量的初值），那么 0x7fffffff 确实是一个完美的选择。\n\n但是更多情况下， 0x7fffffff 并不是一个好的选择，比如在最短路径算法中，我们使用松弛操作：\n```\nif(d[u]+w[u][v]<d[v]) \n    d[v]=d[u]+w[u][v];\n```\n如果 u,v 之间没有边，那么 w[u][v]=INF ，如果我们的 INF 取 0x7fffffff ，那么 d[u]+w[u][v] 会溢出而变成负数，我们的松弛操作便出错了！\n\n准确来说， 0x7fffffff 不能满足“无穷大加一个有穷的数依然是无穷大”这个条件，它会变成了一个很小的负数。\n\n更进一步的，如果有一个数能够满足“无穷大加无穷大依然是无穷大”，那么就更好了！\n\n前阵子无意中看到了一个不一样的取值， INF=0x3f3f3f3f ，这时我又郁闷了，这个值又代表的是什么？于是我去寻找答案，发现这个值的设置真的很精妙！\n\n0x3f3f3f3f的十进制是1061109567，是10^9级别的（和0x7fffffff一个数量级），而一般场合下的数据都是小于10^9的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。 \n\n另一方面，由于一般的数据都不会大于10^9，所以当我们把无穷大加上一个数据时，它并不会溢出（这就满足了“无穷大加一个有穷的数依然是无穷大”），事实上 0x3f3f3f3f+0x3f3f3f3f=2122219134 ，这非常大但却没有超过32-bit int 的表示范围，所以 0x3f3f3f3f 还满足了我们“无穷大加无穷大还是无穷大”的需求。\n\n最后，0x3f3f3f3f还能给我们带来一个意想不到的额外好处：   \n如果我们想要将某个数组清零，我们通常会使用memset(a,0,sizeof(a))，方便又高效，但是当我们想将某个数组全部赋值为无穷大时，就不能使用memset函数而得自己写循环了，因为memset是按字节操作的，它能够对数组清零是因为0的每个字节都是0（一般我们只有赋值为-1和0的时候才使用它）。现在好了，如果我们将无穷大设为0x3f3f3f3f，那么奇迹就发生了，0x3f3f3f3f的每个字节都是0x3f！所以要把一段内存全部置为无穷大，我们只需要memset(a,0x3f,sizeof(a))。\n\n所以在通常的场合下，0x3f3f3f3f真的是一个非常棒的选择！\n\n# 参考资料\n[【算法设计与数据结构】为何程序员喜欢将INF设置为0x3f3f3f3f？](http://blog.csdn.net/jiange_zh/article/details/50198097)","slug":"为何程序员喜欢将INF设置为0x3f3f3f3f？","published":1,"updated":"2018-01-04T03:32:16.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6ctj0015ig5nynyuycka"},{"title":"hihoCoder - 1523、数组重排2","date":"2017-09-05T14:40:07.000Z","_content":"# [#1523 : 数组重排2](http://hihocoder.com/problemset/problem/1523)\n## 描述\n给定一个1-N的排列A1, A2, ... AN，每次操作小Hi可以选择一个数，把它放到数组的最左边。\n\n请计算小Hi最少进行几次操作就能使得新数组是递增排列的。\n\n---\n## 输入\n第一行包含一个整数N。\n\n第二行包含N个两两不同整数A1, A2, ... AN。(1 <= Ai <= N)\n\n对于60%的数据 1 <= N <= 20\n\n对于100%的数据 1 <= N <= 100000\n\n---\n## 输出\n一个整数代表答案\n\n---\n## 样例输入\n>5\n2 3 1 4 5\n\n---\n## 样例输出\n>1\n\n---\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n从数组的最后向前遍历，令flag=n，如果碰见a[i]==n，则n-1。遍历完n即为答案。原理即为此题是将不符合递增序列的数字放置最前方，则必定是将所有不符合序列的数字中最大的一个放到最前，因此只要将符合序列的数字个数找出删去即可。\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <cctype>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <utility>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#pragma comment(linker, \"/STACK:1024000000,1024000000\")     //手动扩栈\ntypedef long long LL;\n#define INF = 0x3f3f3f3f;\n#define eps 1e-10\n#define ff(a, b, c, d) for(int a=b; a<c; a+=d)\n#define fff(a, b, c, d) for(int a=b; a>=c; a-=d)\n#define mm(a, b)       memset(a, b, sizeof(a))\nconst double PIE = acos(-1.0);\nvoid init() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n}\n\n\nconst int N = 100000+50;\nint n;\nint a[N] = {0};\n\nint main() {\n    init();\n    cin >> n;\n    ff(i,0,n,1)\n        cin >> a[i];\n    int MAX = n;\n    fff(i,n-1,0,1)\n        if(a[i] == MAX)\n            MAX--;\n    cout << MAX << endl;\n    return 0;\n}\n```\n\n### Java\n```\nWritting...\n```","source":"_posts/hihoCoder-1523、数组重排2.md","raw":"---\ntitle: hihoCoder - 1523、数组重排2\ndate: 2017-09-05 22:40:07\n\ntags:\n - ACM\n - hiho\n - 贪心\n---\n# [#1523 : 数组重排2](http://hihocoder.com/problemset/problem/1523)\n## 描述\n给定一个1-N的排列A1, A2, ... AN，每次操作小Hi可以选择一个数，把它放到数组的最左边。\n\n请计算小Hi最少进行几次操作就能使得新数组是递增排列的。\n\n---\n## 输入\n第一行包含一个整数N。\n\n第二行包含N个两两不同整数A1, A2, ... AN。(1 <= Ai <= N)\n\n对于60%的数据 1 <= N <= 20\n\n对于100%的数据 1 <= N <= 100000\n\n---\n## 输出\n一个整数代表答案\n\n---\n## 样例输入\n>5\n2 3 1 4 5\n\n---\n## 样例输出\n>1\n\n---\n## 限制\n时间限制:10000ms\n单点时限:1000ms\n内存限制:256MB\n\n---\n## 思路\n从数组的最后向前遍历，令flag=n，如果碰见a[i]==n，则n-1。遍历完n即为答案。原理即为此题是将不符合递增序列的数字放置最前方，则必定是将所有不符合序列的数字中最大的一个放到最前，因此只要将符合序列的数字个数找出删去即可。\n\n---\n## 题解\n\n### C++\n```\n/*\n    Author: Yuki\n    GitHub: https://github.com/Yuki-14544869/\n    Blog:   https://yuki-14544869.github.io/\n*/\n#include <map>\n#include <set>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <cctype>\n#include <cstdio>\n#include <vector>\n#include <string>\n#include <cstring>\n#include <utility>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n#pragma comment(linker, \"/STACK:1024000000,1024000000\")     //手动扩栈\ntypedef long long LL;\n#define INF = 0x3f3f3f3f;\n#define eps 1e-10\n#define ff(a, b, c, d) for(int a=b; a<c; a+=d)\n#define fff(a, b, c, d) for(int a=b; a>=c; a-=d)\n#define mm(a, b)       memset(a, b, sizeof(a))\nconst double PIE = acos(-1.0);\nvoid init() {\n#ifndef ONLINE_JUDGE\n    freopen(\"in.txt\", \"r\", stdin);\n#endif\n}\n\n\nconst int N = 100000+50;\nint n;\nint a[N] = {0};\n\nint main() {\n    init();\n    cin >> n;\n    ff(i,0,n,1)\n        cin >> a[i];\n    int MAX = n;\n    fff(i,n-1,0,1)\n        if(a[i] == MAX)\n            MAX--;\n    cout << MAX << endl;\n    return 0;\n}\n```\n\n### Java\n```\nWritting...\n```","slug":"hihoCoder-1523、数组重排2","published":1,"updated":"2018-01-04T03:32:16.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6ctk0016ig5nzwvjggfe"},{"title":"提取 Windows 10 锁屏壁纸","date":"2017-08-16T11:41:25.000Z","_content":"\nWindows  10 有一个叫做 「Windows 聚焦」的功能，会定期精选一些壁纸作为锁屏壁纸。**可惜它并没有提供下载功能**，当你看到一些很漂亮的照片，如何将它保存下来，用作其它壁纸呢？\n\n**按 Win + R，复制引号内的代码输入即可进入锁屏壁纸的存放文件夹。** \"%localappdata%\\Packages\\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\\LocalState\\Assets\"\n\n![](/Img/2017/08/16/2017-08-16_19-53.png)\n\n然后将里面的文件**复制到其他文件夹中**，后缀改成「.jpg」即可正常显示。（请勿在原文件夹中修改。）\n\n如果你不想手动修改，也可以使用批量修改。在文件夹里**新建一个文本文档**，打开在里面输入\n\n```\nren * *.jpg  //每个星号前面都有空格\n```\n\n保存，然后**将新建文档后缀名「txt」改成「bat」**，双击运行。\n\n![](/Img/2017/08/16/2017-08-16_20-02.png)\n\n同一张图片会有竖屏和横屏两种模式，可以方便地为设置为手机壁纸。需要注意的是，这些文件夹里面也会掺杂一些其它缓存的图片。\n\n---\n\n# 参考文献\n[有办法提取 Win 10 的锁屏壁纸吗？| 有轻功 #155](http://mp.weixin.qq.com/s/EgyNnpAUaPH9IpwdLwDxNw)\n\n![](/Img/AppSo.bmp)**微信扫一扫关注 AppSo 公众号**","source":"_posts/提取-Windows-10-锁屏壁纸.md","raw":"---\ntitle: 提取 Windows 10 锁屏壁纸\ndate: 2017-08-16 19:41:25\ntags:\n  - Windows\n---\n\nWindows  10 有一个叫做 「Windows 聚焦」的功能，会定期精选一些壁纸作为锁屏壁纸。**可惜它并没有提供下载功能**，当你看到一些很漂亮的照片，如何将它保存下来，用作其它壁纸呢？\n\n**按 Win + R，复制引号内的代码输入即可进入锁屏壁纸的存放文件夹。** \"%localappdata%\\Packages\\Microsoft.Windows.ContentDeliveryManager_cw5n1h2txyewy\\LocalState\\Assets\"\n\n![](/Img/2017/08/16/2017-08-16_19-53.png)\n\n然后将里面的文件**复制到其他文件夹中**，后缀改成「.jpg」即可正常显示。（请勿在原文件夹中修改。）\n\n如果你不想手动修改，也可以使用批量修改。在文件夹里**新建一个文本文档**，打开在里面输入\n\n```\nren * *.jpg  //每个星号前面都有空格\n```\n\n保存，然后**将新建文档后缀名「txt」改成「bat」**，双击运行。\n\n![](/Img/2017/08/16/2017-08-16_20-02.png)\n\n同一张图片会有竖屏和横屏两种模式，可以方便地为设置为手机壁纸。需要注意的是，这些文件夹里面也会掺杂一些其它缓存的图片。\n\n---\n\n# 参考文献\n[有办法提取 Win 10 的锁屏壁纸吗？| 有轻功 #155](http://mp.weixin.qq.com/s/EgyNnpAUaPH9IpwdLwDxNw)\n\n![](/Img/AppSo.bmp)**微信扫一扫关注 AppSo 公众号**","slug":"提取-Windows-10-锁屏壁纸","published":1,"updated":"2018-01-04T03:32:16.896Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjc1n6ctl0019ig5npwqe4spe"},{"title":"使用hexo+github搭建我的个人博客","date":"2017-08-10T08:12:08.000Z","comments":1,"_content":"## **闲聊**\n在ACM的学习过程中碰见不会做的题目总是会上网搜索题解，在这过程中也是见识到了不同样式的博客。从而也萌生了自己写博客的念头，也想将自己的所学到的东西分享到博客上，不仅可以让别人学习，也是对自己的所学的一种巩固。于是一开始我用过一段时间的CSDN作为自己的博客，但是CSDN的样式对我来说仍然太丑，而且广告太多，在浏览之余，无意间发现了hexo，而且他的next主题性冷淡的色彩的搭配也直接戳中了我的内心。于是便乘着暑假给学弟们讲课之余建立了这么一个博客。\n\n搭建环境步骤：\n\n[一、 搭建环境准备](#1)  \n[二、 安装Hexo](#2)  \n[三、 Hexo的相关配置](#3)  \n[四、 怎样将Hexo与github page 联系起来](#4)  \n[五、 发布文章](#5)  \n[六、 Next主题的简单配置](#6)\n\n---------------------------------------------------------------------------------------------\n\n\n\n\n\n\n\n## **一、 搭建环境准备**\n\n大概可以分为以下三步 \n- Node.js 的安装和准备 \n- Git的安装和准备 \n- gitHub账户的配置  \n1. 配置Node.js环境\n   下载node.js安装文件\n    -[Windows Installer 32-bit](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi)\n    -[Windows Installer 64-bit](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi)\n   保持默认设置，一路next即可。最后在命令行界面(Win+R, 弹出运行之后输入cmd回车即可)确认版本以确定是否安装成功\n   ```\n    node -v\n    npm -v\n   ```\n   ![](/Img/2017/08/10/2017-08-10_17-34.png)  \n2. 配置Git环境\n   [Git官网下载地址](https://git-scm.com/downloads)\n   与Node.js一样，一路默认配置直接下一步即可。最后打开命令行界面输入命令： \n   ```\n    git --version\n   ```\n   如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。\n   ![](/Img/2017/08/10/2017-08-10_17-36.png)  \n3. github配置  \n   1. 创建代码库\n      登陆之后，点击页面右上角的加号，选择New repository：\n      ![](/Img/2017/08/10/2017-08-10_17-42.png)\n      新建代码库  \n      进入代码库创建页面：  \n      在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示：\n      ![](/Img/2017/08/10/2017-08-10_19-54.jpg)\n      **注意：比如我的github名称是Yuki-14544869 ,这里你就填 Yuki-14544869.github.io,如果你的名字是123456，那你就填 123456.github.io**\n   2. 代码库设置  \n      正确创建之后，你将会看到如下界面： \n      ![](/Img/2017/08/10/2017-08-10_19-56.jpg)\n      接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图：\n      ![](/Img/2017/08/10/2017-08-10_19-57.jpg)  \n      **Github pages**\n      ![](/Img/2017/08/10/2017-08-10_19-58.jpg)  \n      点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果你的配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。\n\n到此搭建hexo博客的相关环境配置已经完成，下面开始讲解Hexo的相关配置\n\n----------------------------------------------------------------------------------------------\n\n\n\n\n## **二、 安装Hexo**\n在自己认为合适的地方创建一个文件夹，这里我以E：/hexo 为例子讲解，首先在E盘目录下创建Hexo文件夹，进入文件夹后右击Git Bash Here进入git。\n![](/Img/2017/08/10/2017-08-10_20-04.png)\n在命令行中输入：\n```\n    npm install hexo-cli -g\n```\n然后你会看到：\n![](/Img/2017/08/10/2017-08-10_20-05.jpg)\n可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入\n```\n    npm install hexo --save\n```\n然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：\n```\n    hexo -v\n```\n如果你看到了如图文字，则说明已经安装成功了。\n![](/Img/2017/08/10/2017-08-10_20-07.jpg)\n\n---------------------------------------------------------------------------------------------\n\n\n\n## **三、 Hexo的相关配置**\n1. 初始化Hexo  \n接着上面的操作，输入：\n```\n    hexo init\n    npm install\n```\n  之后npm将会自动安装你需要的组件，只需要等待npm操作即可。  \n*npm默认从国外下载东西，所以网速可能相对来说比较慢，如果实在忍受不了，可以使用以下操作更换npm的源地址*  \n```\n    npm config set registry https://registry.npm.taobao.org  \n    // 配置后可通过下面方式来验证是否成功   \n    npm config get registry   \n    // 使用cnpm替代默认的npm：\n    npm install -g cnpm --registry=https://registry.npm.taobao.org  \n```\n  *下面你就可以通过cnpm install moduleName来像使用npm一样安装你所需的包了*\n\n2. 首次体验Hexo  \n  继续操作，同样是在git中，输入：\n```\n    hexo g\n    hexo s\n```\n  然后会提示：\n```\n    INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n  在浏览器中打开http://localhost:4000/，你将会看到：\n  ![](/Img/2017/08/10/2017-08-10_20-17.jpg)  \n\n  到目前为止，Hexo在本地的配置已经全都结束了。\n\n  下面会讲解怎样将Hexo与github page 联系起来\n\n---------------------------------------------------------------------------------------------\n\n\n\n\n## **四、 怎样将Hexo与github page 联系起来**\n大概分为以下几步 \n- 配置git个人信息 \n- 配置Deployment\n\n### 配置Git个人信息\n*如果你之前已经配置好Git个人信息，请跳过这一个步骤*\n1. 设置Git的user name和email：(如果是第一次的话)\n  ```\n    git config --global user.name \"123456\"\n    git config --global user.email \"123456@163.com\"\n  ```\n2. 创建一个 SSH key\n  ```\n    ssh-keygen -t rsa -C \"123456@163.com\"\n  ```\n  代码参数含义：\n\n  * -t 指定密钥类型，默认是 rsa ，可以省略。\n  * -C 设置注释文字，比如邮箱。\n  * -f 指定密钥文件存储文件名。\n\n  以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码，如：\n  ```\n    Generating public/private rsa key pair.\n    # Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]\n  ```\n  当然，你也可以不输入文件名，使用默认文件名（推荐），那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。\n\n  接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到github上了，如：\n  ```\n    Enter passphrase (empty for no passphrase): \n    # Enter same passphrase again:\n  ```\n  接下来，就会显示如下代码提示，如：\n  ```\n    Your identification has been saved in /c/Users/you/.ssh/id_rsa.\n    # Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.\n    # The key fingerprint is:\n    # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n  ```\n  当你看到上面这段代码的收，那就说明，你的 SSH key 已经创建成功，你只需要添加到github的SSH key上就可以了。\n3. 添加你的 SSH key 到 github上面去\n  1. 首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：\n    ```\n        $ clip < ~/.ssh/id_rsa.pub\n    ```\n  2. 登录你的github账号，从又上角的设置（ Account Settings ）进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。\n  3. 点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。当然，上面的 Title 所对应的输入框你也可以输入一个该 SSH key 显示在 github 上的一个别名。默认的会使用你的邮件名称。  \n4. 测试一下该SSH key\n  ```\n    $ ssh -T git@github.com\n  ```\n  当你输入以上代码时，会有一段警告代码，如：\n  ```\n    The authenticity of host 'github.com (207.97.227.239)' can't be established.\n    # RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\n    # Are you sure you want to continue connecting (yes/no)?\n  ```\n  这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：\n  ```\n    Enter passphrase for key '/c/Users/Administrator/.ssh/id_rsa':\n  ```\n  当然如果你密码输错了，会再要求你输入，知道对了为止。  \n  注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。  \n  密码正确后你会看到下面这段话，如：\n  ```\n    Hi username! You've successfully authenticated, but GitHub does not\n    # provide shell access.\n  ```\n  如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，者表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。\n### 配置Deployment\n  同样在_config.yml文件中，找到Deployment，然后按照如下修改：\n  ```\n    deploy:\n    type: git\n    repo: git@github.com:yourname/yourname.github.io.git\n    branch: master\n  ```\n  比如我的仓库的地址是git@github.com:Yuki-14544869/Yuki-14544869.github.io.git，所以配置如下:\n  ```\n    deploy:\n    type: git\n    repo: git@github.com:Yuki-14544869/Yuki-14544869.github.io.git\n    branch: master\n  ```\n\n  ------------------------------------------------------------------------------------------------\n\n\n\n  \n\n## **五、 发布文章**\n新建一篇博客，执行下面的命令：\n![](/Img/2017/08/10/2017-08-10_21-51.jpg)\n这时候在我的 电脑的目录下 F:\\hexo\\source\\ _posts 将会看到 article title.md 文件  \n用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：\n```\n    hexo g   // 生成\n    hexo d   // 部署\n```\n当然你也可以执行下面的命令，相当于上面两条命令的效果\n```\n    hexo d -g #在部署前先生成\n```\n![](/Img/2017/08/10/2017-08-10_21-53.jpg)\n部署成功后访问 你的地址，https://yourName.github.io\n\n（这里输入我的地址： https://Yuki-14544869.github.io ),将可以看到生成的文章。\n### **踩坑提醒**\n1. 注意需要提前安装一个扩展：\n  ```\n  npm install hexo-deployer-git --save\n  ```\n  **如果没有执行者行命令，将会提醒**\n  ```\n  deloyer not found:git\n  ```\n2. 如果出现下面这样的错误，\n  ```\n  Permission denied (publickey). \n  fatal: Could not read from remote repository. \n  Please make sure you have the correct access rights and the repository exists.\n  ```\n  则是因为没有设置好SSH key所致。请参考我上文第四步的SSH key重新设置。\n------------------------------------------------------------------------------------------------\n\n\n\n\n## **六、 Next主题的简单配置**\n在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为 **站点配置文件**， 后者称为 **主题配置文件**。\n\n比如我的电脑下的 F:\\hexo 目录下的成为 站点配置文件，F:\\hexo\\themes\\next 目录下的成为主题配置文件。\n1. 安装 Next\n  在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：\n  ```\n  cd your-hexo-site\n  git clone https://github.com/iissnan/hexo-theme-next themes/next\n  ```\n2. 启用主题\n  与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。\n  ```\n  theme: next\n  ```\n  到此，Next 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。\n  ```\n  hexo clean\n  ```\n3. 验证主题\n  首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s –debug。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：\n  ```\n  INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n  ```\n  此时即可使用浏览器访问 http://localhost:4000 ，检查站点是否正确运行。  \n  当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse\n  ![](/Img/2017/08/10/2017-08-10_22-21.jpg)\n  现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。\n4. 主题设定\n  选择 Scheme  \n  Scheme 是 Next 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：\n  ```\n  Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n  Mist - Muse 的紧凑版本，整洁有序的单栏外观\n  Pisces - 双栏 Scheme，小家碧玉似的清新\n  Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面\n  ```\n  注释 # 即可。  \n  选择 Mist Scheme\n  ```\n  #scheme: Muse\n  scheme: Mist\n  #scheme: Pisces\n  ```\n5. 设置语言\n  编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：\n  ```\n  language: zh-Hans\n  ```\n6. 设置 菜单\n  菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 Font Awesome 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。\n\n  编辑 主题配置文件，修改以下内容：\n\n  设定菜单内容，对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。\n\n  菜单示例配置:\n  ```\n  menu:\n    home: /                     //主页\n    archives: /archives         //归档页\n    #about: /about              //分类页\n    #categories: /categories    //标签页\n    tags: /tags                 //关于页面\n    #commonweal: /404.html      //公益404\n  ```\n  若你的站点运行在子目录中，请将链接前缀的 / 去掉\n\n  设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 languages/{language}.yml （{language} 为你所使用的语言）。\n\n  以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 languages/zh-Hans.yml，在 menu 字段下添加一项：\n  ```\n  menu:\n    home: 首页\n    archives: 归档\n    categories: 分类\n    tags: 标签\n    about: 关于\n    search: 搜索\n    commonweal: 公益404\n    something: 有料\n  ```\n  设定菜单项的图标，对应的字段是 menu_icons。 此设定格式是 item name: icon name，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的 名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。\n\n  菜单图标配置示例:\n  ```\n  menu_icons:\n    enable: true\n    # Icon Mapping.\n    home: home\n    about: user\n    categories: th\n    tags: tags\n    archives: archive\n    commonweal: heartbeat\n  ```\n  在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用 作为图标。\n\n  请注意键值（如 home）的大小写要严格匹配\n7. 侧栏\n  默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 主题配置文件 中的 sidebar 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。\n\n  设置侧栏的位置，修改 sidebar.position 的值，支持的选项有：\n  ```\n  left - 靠左放置\n  right - 靠右放置\n  ```\n  目前仅 Pisces Scheme 支持 position 配置。影响版本5.0.0及更低版本。\n  ```\n  sidebar:\n    position: left\n  ```\n  设置侧栏显示的时机，修改 sidebar.display 的值，支持的选项有：\n  ```\npost - 默认行为，在文章页面（拥有目录列表）时显示\nalways - 在所有页面中都显示\nhide - 在所有页面中都隐藏（可以手动展开）\nremove - 完全移除\nsidebar:\n  display: post\n  ```\n  已知侧栏在 use motion: false 的情况下不会展示。 影响版本5.0.0及更低版本。\n8. 设置头像\n  编辑 站点配置文件， 新增字段 avatar， 值设置成头像的链接地址。其中，头像的链接地址可以是：\n  ```\nhttp://example.com/avtar.png    //完整的互联网 URI\n/images/avatar.png              //将头像放置主题目录下的 source/images/ 目录下 \n  ```\n9. 设置作者昵称\n  编辑 站点配置文件， 设置 author 为你的昵称。\n10. 站点描述\n  编辑 站点配置文件， 设置  description\n  字段为你的站点描述。站点描述可以是你喜欢的一句签名:)\n\n---------------------------------------------------------\n\n\n## **参考文献**\n1. [手把手教你用Hexo+Github 搭建属于自己的博客](http://blog.csdn.net/gdutxiaoxu/article/details/53576018)\n2. [从NPM到CNPM](http://blog.csdn.net/v2810769/article/details/52585662)\n3. [ github设置添加SSH](http://blog.csdn.net/binyao02123202/article/details/20130891)","source":"_posts/使用 hexo-github 搭建我的个人博客.md","raw":"---\ntitle: 使用hexo+github搭建我的个人博客\ndate: 2017-08-10 16:12:08\ntags: \n  - Hexo\ncomments: true\n---\n## **闲聊**\n在ACM的学习过程中碰见不会做的题目总是会上网搜索题解，在这过程中也是见识到了不同样式的博客。从而也萌生了自己写博客的念头，也想将自己的所学到的东西分享到博客上，不仅可以让别人学习，也是对自己的所学的一种巩固。于是一开始我用过一段时间的CSDN作为自己的博客，但是CSDN的样式对我来说仍然太丑，而且广告太多，在浏览之余，无意间发现了hexo，而且他的next主题性冷淡的色彩的搭配也直接戳中了我的内心。于是便乘着暑假给学弟们讲课之余建立了这么一个博客。\n\n搭建环境步骤：\n\n[一、 搭建环境准备](#1)  \n[二、 安装Hexo](#2)  \n[三、 Hexo的相关配置](#3)  \n[四、 怎样将Hexo与github page 联系起来](#4)  \n[五、 发布文章](#5)  \n[六、 Next主题的简单配置](#6)\n\n---------------------------------------------------------------------------------------------\n\n\n\n\n\n\n\n## **一、 搭建环境准备**\n\n大概可以分为以下三步 \n- Node.js 的安装和准备 \n- Git的安装和准备 \n- gitHub账户的配置  \n1. 配置Node.js环境\n   下载node.js安装文件\n    -[Windows Installer 32-bit](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x86.msi)\n    -[Windows Installer 64-bit](https://nodejs.org/dist/v4.2.3/node-v4.2.3-x64.msi)\n   保持默认设置，一路next即可。最后在命令行界面(Win+R, 弹出运行之后输入cmd回车即可)确认版本以确定是否安装成功\n   ```\n    node -v\n    npm -v\n   ```\n   ![](/Img/2017/08/10/2017-08-10_17-34.png)  \n2. 配置Git环境\n   [Git官网下载地址](https://git-scm.com/downloads)\n   与Node.js一样，一路默认配置直接下一步即可。最后打开命令行界面输入命令： \n   ```\n    git --version\n   ```\n   如果结果如下图所示，则说明安装正确，可以进行下一步了，如果不正确，则需要回头检查自己的安装过程。\n   ![](/Img/2017/08/10/2017-08-10_17-36.png)  \n3. github配置  \n   1. 创建代码库\n      登陆之后，点击页面右上角的加号，选择New repository：\n      ![](/Img/2017/08/10/2017-08-10_17-42.png)\n      新建代码库  \n      进入代码库创建页面：  \n      在Repository name下填写yourname.github.io，Description (optional)下填写一些简单的描述（不写也没有关系），如图所示：\n      ![](/Img/2017/08/10/2017-08-10_19-54.jpg)\n      **注意：比如我的github名称是Yuki-14544869 ,这里你就填 Yuki-14544869.github.io,如果你的名字是123456，那你就填 123456.github.io**\n   2. 代码库设置  \n      正确创建之后，你将会看到如下界面： \n      ![](/Img/2017/08/10/2017-08-10_19-56.jpg)\n      接下来开启gh-pages功能，点击界面右侧的Settings，你将会打开这个库的setting页面，向下拖动，直到看见GitHub Pages，如图：\n      ![](/Img/2017/08/10/2017-08-10_19-57.jpg)  \n      **Github pages**\n      ![](/Img/2017/08/10/2017-08-10_19-58.jpg)  \n      点击Automatic page generator，Github将会自动替你创建出一个gh-pages的页面。 如果你的配置没有问题，那么大约15分钟之后，yourname.github.io这个网址就可以正常访问了~ 如果yourname.github.io已经可以正常访问了，那么Github一侧的配置已经全部结束了。\n\n到此搭建hexo博客的相关环境配置已经完成，下面开始讲解Hexo的相关配置\n\n----------------------------------------------------------------------------------------------\n\n\n\n\n## **二、 安装Hexo**\n在自己认为合适的地方创建一个文件夹，这里我以E：/hexo 为例子讲解，首先在E盘目录下创建Hexo文件夹，进入文件夹后右击Git Bash Here进入git。\n![](/Img/2017/08/10/2017-08-10_20-04.png)\n在命令行中输入：\n```\n    npm install hexo-cli -g\n```\n然后你会看到：\n![](/Img/2017/08/10/2017-08-10_20-05.jpg)\n可能你会看到一个WARN，但是不用担心，这不会影响你的正常使用。 然后输入\n```\n    npm install hexo --save\n```\n然后你会看到命令行窗口刷了一大堆白字，下面我们来看一看Hexo是不是已经安装好了。 在命令行中输入：\n```\n    hexo -v\n```\n如果你看到了如图文字，则说明已经安装成功了。\n![](/Img/2017/08/10/2017-08-10_20-07.jpg)\n\n---------------------------------------------------------------------------------------------\n\n\n\n## **三、 Hexo的相关配置**\n1. 初始化Hexo  \n接着上面的操作，输入：\n```\n    hexo init\n    npm install\n```\n  之后npm将会自动安装你需要的组件，只需要等待npm操作即可。  \n*npm默认从国外下载东西，所以网速可能相对来说比较慢，如果实在忍受不了，可以使用以下操作更换npm的源地址*  \n```\n    npm config set registry https://registry.npm.taobao.org  \n    // 配置后可通过下面方式来验证是否成功   \n    npm config get registry   \n    // 使用cnpm替代默认的npm：\n    npm install -g cnpm --registry=https://registry.npm.taobao.org  \n```\n  *下面你就可以通过cnpm install moduleName来像使用npm一样安装你所需的包了*\n\n2. 首次体验Hexo  \n  继续操作，同样是在git中，输入：\n```\n    hexo g\n    hexo s\n```\n  然后会提示：\n```\n    INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n```\n  在浏览器中打开http://localhost:4000/，你将会看到：\n  ![](/Img/2017/08/10/2017-08-10_20-17.jpg)  \n\n  到目前为止，Hexo在本地的配置已经全都结束了。\n\n  下面会讲解怎样将Hexo与github page 联系起来\n\n---------------------------------------------------------------------------------------------\n\n\n\n\n## **四、 怎样将Hexo与github page 联系起来**\n大概分为以下几步 \n- 配置git个人信息 \n- 配置Deployment\n\n### 配置Git个人信息\n*如果你之前已经配置好Git个人信息，请跳过这一个步骤*\n1. 设置Git的user name和email：(如果是第一次的话)\n  ```\n    git config --global user.name \"123456\"\n    git config --global user.email \"123456@163.com\"\n  ```\n2. 创建一个 SSH key\n  ```\n    ssh-keygen -t rsa -C \"123456@163.com\"\n  ```\n  代码参数含义：\n\n  * -t 指定密钥类型，默认是 rsa ，可以省略。\n  * -C 设置注释文字，比如邮箱。\n  * -f 指定密钥文件存储文件名。\n\n  以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码，如：\n  ```\n    Generating public/private rsa key pair.\n    # Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]\n  ```\n  当然，你也可以不输入文件名，使用默认文件名（推荐），那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。\n\n  接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到github上了，如：\n  ```\n    Enter passphrase (empty for no passphrase): \n    # Enter same passphrase again:\n  ```\n  接下来，就会显示如下代码提示，如：\n  ```\n    Your identification has been saved in /c/Users/you/.ssh/id_rsa.\n    # Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.\n    # The key fingerprint is:\n    # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com\n  ```\n  当你看到上面这段代码的收，那就说明，你的 SSH key 已经创建成功，你只需要添加到github的SSH key上就可以了。\n3. 添加你的 SSH key 到 github上面去\n  1. 首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：\n    ```\n        $ clip < ~/.ssh/id_rsa.pub\n    ```\n  2. 登录你的github账号，从又上角的设置（ Account Settings ）进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。\n  3. 点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。当然，上面的 Title 所对应的输入框你也可以输入一个该 SSH key 显示在 github 上的一个别名。默认的会使用你的邮件名称。  \n4. 测试一下该SSH key\n  ```\n    $ ssh -T git@github.com\n  ```\n  当你输入以上代码时，会有一段警告代码，如：\n  ```\n    The authenticity of host 'github.com (207.97.227.239)' can't be established.\n    # RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.\n    # Are you sure you want to continue connecting (yes/no)?\n  ```\n  这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：\n  ```\n    Enter passphrase for key '/c/Users/Administrator/.ssh/id_rsa':\n  ```\n  当然如果你密码输错了，会再要求你输入，知道对了为止。  \n  注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。  \n  密码正确后你会看到下面这段话，如：\n  ```\n    Hi username! You've successfully authenticated, but GitHub does not\n    # provide shell access.\n  ```\n  如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，者表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。\n### 配置Deployment\n  同样在_config.yml文件中，找到Deployment，然后按照如下修改：\n  ```\n    deploy:\n    type: git\n    repo: git@github.com:yourname/yourname.github.io.git\n    branch: master\n  ```\n  比如我的仓库的地址是git@github.com:Yuki-14544869/Yuki-14544869.github.io.git，所以配置如下:\n  ```\n    deploy:\n    type: git\n    repo: git@github.com:Yuki-14544869/Yuki-14544869.github.io.git\n    branch: master\n  ```\n\n  ------------------------------------------------------------------------------------------------\n\n\n\n  \n\n## **五、 发布文章**\n新建一篇博客，执行下面的命令：\n![](/Img/2017/08/10/2017-08-10_21-51.jpg)\n这时候在我的 电脑的目录下 F:\\hexo\\source\\ _posts 将会看到 article title.md 文件  \n用MarDown编辑器打开就可以编辑文章了。文章编辑好之后，运行生成、部署命令：\n```\n    hexo g   // 生成\n    hexo d   // 部署\n```\n当然你也可以执行下面的命令，相当于上面两条命令的效果\n```\n    hexo d -g #在部署前先生成\n```\n![](/Img/2017/08/10/2017-08-10_21-53.jpg)\n部署成功后访问 你的地址，https://yourName.github.io\n\n（这里输入我的地址： https://Yuki-14544869.github.io ),将可以看到生成的文章。\n### **踩坑提醒**\n1. 注意需要提前安装一个扩展：\n  ```\n  npm install hexo-deployer-git --save\n  ```\n  **如果没有执行者行命令，将会提醒**\n  ```\n  deloyer not found:git\n  ```\n2. 如果出现下面这样的错误，\n  ```\n  Permission denied (publickey). \n  fatal: Could not read from remote repository. \n  Please make sure you have the correct access rights and the repository exists.\n  ```\n  则是因为没有设置好SSH key所致。请参考我上文第四步的SSH key重新设置。\n------------------------------------------------------------------------------------------------\n\n\n\n\n## **六、 Next主题的简单配置**\n在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。\n\n为了描述方便，在以下说明中，将前者称为 **站点配置文件**， 后者称为 **主题配置文件**。\n\n比如我的电脑下的 F:\\hexo 目录下的成为 站点配置文件，F:\\hexo\\themes\\next 目录下的成为主题配置文件。\n1. 安装 Next\n  在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 代码：\n  ```\n  cd your-hexo-site\n  git clone https://github.com/iissnan/hexo-theme-next themes/next\n  ```\n2. 启用主题\n  与所有 Hexo 主题启用的模式一样。 当 克隆/下载 完成后，打开 站点配置文件， 找到 theme 字段，并将其值更改为 next。\n  ```\n  theme: next\n  ```\n  到此，Next 主题安装完成。下一步我们将验证主题是否正确启用。在切换主题之后、验证之前， 我们最好使用 hexo clean 来清除 Hexo 的缓存。\n  ```\n  hexo clean\n  ```\n3. 验证主题\n  首先启动 Hexo 本地站点，并开启调试模式（即加上 –debug），整个命令是 hexo s –debug。 在服务启动的过程，注意观察命令行输出是否有任何异常信息，如果你碰到问题，这些信息将帮助他人更好的定位错误。 当命令行输出中提示出：\n  ```\n  INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop.\n  ```\n  此时即可使用浏览器访问 http://localhost:4000 ，检查站点是否正确运行。  \n  当你看到站点的外观与下图所示类似时即说明你已成功安装 NexT 主题。这是 NexT 默认的 Scheme —— Muse\n  ![](/Img/2017/08/10/2017-08-10_22-21.jpg)\n  现在，你已经成功安装并启用了 NexT 主题。下一步我们将要更改一些主题的设定，包括个性化以及集成第三方服务。\n4. 主题设定\n  选择 Scheme  \n  Scheme 是 Next 提供的一种特性，借助于 Scheme，NexT 为你提供多种不同的外观。同时，几乎所有的配置都可以 在 Scheme 之间共用。目前 NexT 支持三种 Scheme，他们是：\n  ```\n  Muse - 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白\n  Mist - Muse 的紧凑版本，整洁有序的单栏外观\n  Pisces - 双栏 Scheme，小家碧玉似的清新\n  Scheme 的切换通过更改 主题配置文件，搜索 scheme 关键字。 你会看到有三行 scheme 的配置，将你需用启用的 scheme 前面\n  ```\n  注释 # 即可。  \n  选择 Mist Scheme\n  ```\n  #scheme: Muse\n  scheme: Mist\n  #scheme: Pisces\n  ```\n5. 设置语言\n  编辑 站点配置文件， 将 language 设置成你所需要的语言。建议明确设置你所需要的语言，例如选用简体中文，配置如下：\n  ```\n  language: zh-Hans\n  ```\n6. 设置 菜单\n  菜单配置包括三个部分，第一是菜单项（名称和链接），第二是菜单项的显示文本，第三是菜单项对应的图标。 NexT 使用的是 Font Awesome 提供的图标， Font Awesome 提供了 600+ 的图标，可以满足绝大的多数的场景，同时无须担心在 Retina 屏幕下 图标模糊的问题。\n\n  编辑 主题配置文件，修改以下内容：\n\n  设定菜单内容，对应的字段是 menu。 菜单内容的设置格式是：item name: link。其中 item name 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。\n\n  菜单示例配置:\n  ```\n  menu:\n    home: /                     //主页\n    archives: /archives         //归档页\n    #about: /about              //分类页\n    #categories: /categories    //标签页\n    tags: /tags                 //关于页面\n    #commonweal: /404.html      //公益404\n  ```\n  若你的站点运行在子目录中，请将链接前缀的 / 去掉\n\n  设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 languages/{language}.yml （{language} 为你所使用的语言）。\n\n  以简体中文为例，若你需要添加一个菜单项，比如 something。那么就需要修改简体中文对应的翻译文件 languages/zh-Hans.yml，在 menu 字段下添加一项：\n  ```\n  menu:\n    home: 首页\n    archives: 归档\n    categories: 分类\n    tags: 标签\n    about: 关于\n    search: 搜索\n    commonweal: 公益404\n    something: 有料\n  ```\n  设定菜单项的图标，对应的字段是 menu_icons。 此设定格式是 item name: icon name，其中 item name 与上一步所配置的菜单名字对应，icon name 是 Font Awesome 图标的 名字。而 enable 可用于控制是否显示图标，你可以设置成 false 来去掉图标。\n\n  菜单图标配置示例:\n  ```\n  menu_icons:\n    enable: true\n    # Icon Mapping.\n    home: home\n    about: user\n    categories: th\n    tags: tags\n    archives: archive\n    commonweal: heartbeat\n  ```\n  在菜单图标开启的情况下，如果菜单项与菜单未匹配（没有设置或者无效的 Font Awesome 图标名字） 的情况下，NexT 将会使用 作为图标。\n\n  请注意键值（如 home）的大小写要严格匹配\n7. 侧栏\n  默认情况下，侧栏仅在文章页面（拥有目录列表）时才显示，并放置于右侧位置。 可以通过修改 主题配置文件 中的 sidebar 字段来控制侧栏的行为。侧栏的设置包括两个部分，其一是侧栏的位置， 其二是侧栏显示的时机。\n\n  设置侧栏的位置，修改 sidebar.position 的值，支持的选项有：\n  ```\n  left - 靠左放置\n  right - 靠右放置\n  ```\n  目前仅 Pisces Scheme 支持 position 配置。影响版本5.0.0及更低版本。\n  ```\n  sidebar:\n    position: left\n  ```\n  设置侧栏显示的时机，修改 sidebar.display 的值，支持的选项有：\n  ```\npost - 默认行为，在文章页面（拥有目录列表）时显示\nalways - 在所有页面中都显示\nhide - 在所有页面中都隐藏（可以手动展开）\nremove - 完全移除\nsidebar:\n  display: post\n  ```\n  已知侧栏在 use motion: false 的情况下不会展示。 影响版本5.0.0及更低版本。\n8. 设置头像\n  编辑 站点配置文件， 新增字段 avatar， 值设置成头像的链接地址。其中，头像的链接地址可以是：\n  ```\nhttp://example.com/avtar.png    //完整的互联网 URI\n/images/avatar.png              //将头像放置主题目录下的 source/images/ 目录下 \n  ```\n9. 设置作者昵称\n  编辑 站点配置文件， 设置 author 为你的昵称。\n10. 站点描述\n  编辑 站点配置文件， 设置  description\n  字段为你的站点描述。站点描述可以是你喜欢的一句签名:)\n\n---------------------------------------------------------\n\n\n## **参考文献**\n1. [手把手教你用Hexo+Github 搭建属于自己的博客](http://blog.csdn.net/gdutxiaoxu/article/details/53576018)\n2. [从NPM到CNPM](http://blog.csdn.net/v2810769/article/details/52585662)\n3. [ github设置添加SSH](http://blog.csdn.net/binyao02123202/article/details/20130891)","slug":"使用 hexo-github 搭建我的个人博客","published":1,"updated":"2018-01-04T03:32:16.896Z","layout":"post","photos":[],"link":"","_id":"cjc1n6ctm001big5n8i0tsrxu"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjc1n6csk0001ig5nkngzs2t7","tag_id":"cjc1n6csr0004ig5ngm3sew7p","_id":"cjc1n6csx0009ig5n4tn315io"},{"post_id":"cjc1n6csz000big5n9e8nk2s7","tag_id":"cjc1n6csr0004ig5ngm3sew7p","_id":"cjc1n6ct3000eig5n8318uzfs"},{"post_id":"cjc1n6ct1000dig5nc1tkeiz8","tag_id":"cjc1n6csr0004ig5ngm3sew7p","_id":"cjc1n6ct5000hig5nxqut8kuc"},{"post_id":"cjc1n6csp0003ig5ny8ig41ys","tag_id":"cjc1n6csx0008ig5nvgltkz5u","_id":"cjc1n6ct7000jig5nfy5mivsl"},{"post_id":"cjc1n6csp0003ig5ny8ig41ys","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6ct9000mig5niqg2z8gt"},{"post_id":"cjc1n6ct6000iig5no9a1af7q","tag_id":"cjc1n6csr0004ig5ngm3sew7p","_id":"cjc1n6cta000oig5nibah9fjr"},{"post_id":"cjc1n6cst0005ig5nisfj763y","tag_id":"cjc1n6csr0004ig5ngm3sew7p","_id":"cjc1n6ctb000rig5njf7q2tjr"},{"post_id":"cjc1n6csu0006ig5n519tzfke","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6ctf000wig5n6z8yanpa"},{"post_id":"cjc1n6csu0006ig5n519tzfke","tag_id":"cjc1n6csx0008ig5nvgltkz5u","_id":"cjc1n6ctg000yig5njgpddpvq"},{"post_id":"cjc1n6csw0007ig5npbwrm8x8","tag_id":"cjc1n6cte000uig5ndtnvubj6","_id":"cjc1n6cth0011ig5nzf6z3s1p"},{"post_id":"cjc1n6ctj0015ig5nynyuycka","tag_id":"cjc1n6csx0008ig5nvgltkz5u","_id":"cjc1n6ctl0018ig5nbdbqqb00"},{"post_id":"cjc1n6csy000aig5ne29u6m8i","tag_id":"cjc1n6ctg000zig5nd7crh3wa","_id":"cjc1n6ctm001aig5nj3cpmblf"},{"post_id":"cjc1n6csy000aig5ne29u6m8i","tag_id":"cjc1n6ctj0014ig5n4uepbm45","_id":"cjc1n6ctn001dig5ntwhbihde"},{"post_id":"cjc1n6ct3000fig5npsmm4881","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6cto001eig5n2brm70tz"},{"post_id":"cjc1n6ct3000fig5npsmm4881","tag_id":"cjc1n6ctl0017ig5ngs6brt48","_id":"cjc1n6cto001gig5n8pfibrvu"},{"post_id":"cjc1n6ctm001big5n8i0tsrxu","tag_id":"cjc1n6csr0004ig5ngm3sew7p","_id":"cjc1n6ctp001hig5nio2mux4p"},{"post_id":"cjc1n6ct8000kig5nsif9uwt3","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6ctp001kig5nhd5vinqz"},{"post_id":"cjc1n6ct8000kig5nsif9uwt3","tag_id":"cjc1n6ctl0017ig5ngs6brt48","_id":"cjc1n6ctq001lig5ngjbrn9az"},{"post_id":"cjc1n6ct8000kig5nsif9uwt3","tag_id":"cjc1n6cto001fig5nmvt8h66j","_id":"cjc1n6ctq001nig5nvt6zuk5r"},{"post_id":"cjc1n6ct8000kig5nsif9uwt3","tag_id":"cjc1n6ctp001iig5n46en7fvp","_id":"cjc1n6ctq001oig5ngseg13ym"},{"post_id":"cjc1n6ct9000nig5nspxh957d","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6ctr001qig5nxb44trc2"},{"post_id":"cjc1n6ct9000nig5nspxh957d","tag_id":"cjc1n6ctl0017ig5ngs6brt48","_id":"cjc1n6ctr001rig5nt2wadtjb"},{"post_id":"cjc1n6ct9000nig5nspxh957d","tag_id":"cjc1n6ctp001iig5n46en7fvp","_id":"cjc1n6ctr001tig5ngrsyltat"},{"post_id":"cjc1n6cta000pig5nlg4j0oj9","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6cts001vig5nutjoc0rl"},{"post_id":"cjc1n6cta000pig5nlg4j0oj9","tag_id":"cjc1n6ctq001pig5n2w112isf","_id":"cjc1n6cts001wig5n8fhdk67a"},{"post_id":"cjc1n6cta000pig5nlg4j0oj9","tag_id":"cjc1n6ctl0017ig5ngs6brt48","_id":"cjc1n6ctt001yig5nbud3fh7w"},{"post_id":"cjc1n6ctc000sig5n9lh8shyi","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6ctu0020ig5ncpym1v4x"},{"post_id":"cjc1n6ctc000sig5n9lh8shyi","tag_id":"cjc1n6ctl0017ig5ngs6brt48","_id":"cjc1n6ctu0021ig5nzlvc60qv"},{"post_id":"cjc1n6ctc000sig5n9lh8shyi","tag_id":"cjc1n6ctp001iig5n46en7fvp","_id":"cjc1n6ctu0023ig5nzn0ccwdw"},{"post_id":"cjc1n6ctd000tig5n91l8w0us","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6ctv0026ig5nfuwrzkuz"},{"post_id":"cjc1n6ctd000tig5n91l8w0us","tag_id":"cjc1n6ctl0017ig5ngs6brt48","_id":"cjc1n6ctw0027ig5nhzssyj5e"},{"post_id":"cjc1n6ctd000tig5n91l8w0us","tag_id":"cjc1n6ctu0022ig5nma441phu","_id":"cjc1n6ctx0029ig5nkik108tc"},{"post_id":"cjc1n6ctd000tig5n91l8w0us","tag_id":"cjc1n6ctq001pig5n2w112isf","_id":"cjc1n6ctx002aig5ni37dj8i3"},{"post_id":"cjc1n6cte000vig5nier6pc9w","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6ctx002cig5nq1hr6b5m"},{"post_id":"cjc1n6cte000vig5nier6pc9w","tag_id":"cjc1n6ctl0017ig5ngs6brt48","_id":"cjc1n6cty002dig5nicxbb7l1"},{"post_id":"cjc1n6cte000vig5nier6pc9w","tag_id":"cjc1n6ctw0028ig5nkysniwum","_id":"cjc1n6cty002fig5neb9d5lw2"},{"post_id":"cjc1n6ctf000xig5nhif9aa9k","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6ctz002iig5n5grju6df"},{"post_id":"cjc1n6ctf000xig5nhif9aa9k","tag_id":"cjc1n6ctl0017ig5ngs6brt48","_id":"cjc1n6ctz002jig5nnnpp8tak"},{"post_id":"cjc1n6ctf000xig5nhif9aa9k","tag_id":"cjc1n6cty002eig5nmxwskwbi","_id":"cjc1n6cu0002lig5n5q9c1xnz"},{"post_id":"cjc1n6ctf000xig5nhif9aa9k","tag_id":"cjc1n6cty002gig5nd11xv92a","_id":"cjc1n6cu0002mig5nhh0nb1kq"},{"post_id":"cjc1n6ctg0010ig5nkxwjl0ek","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6cu0002oig5nskcy496o"},{"post_id":"cjc1n6ctg0010ig5nkxwjl0ek","tag_id":"cjc1n6ctl0017ig5ngs6brt48","_id":"cjc1n6cu0002pig5nlo9ej78k"},{"post_id":"cjc1n6cth0012ig5n2t2ktagp","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6cu1002rig5naq1gzv9l"},{"post_id":"cjc1n6cth0012ig5n2t2ktagp","tag_id":"cjc1n6ctl0017ig5ngs6brt48","_id":"cjc1n6cu1002sig5n1o7ty2v8"},{"post_id":"cjc1n6cth0012ig5n2t2ktagp","tag_id":"cjc1n6ctw0028ig5nkysniwum","_id":"cjc1n6cu2002uig5nvi2lmegj"},{"post_id":"cjc1n6cti0013ig5no9l2o6q0","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6cu3002wig5npm5bev4r"},{"post_id":"cjc1n6cti0013ig5no9l2o6q0","tag_id":"cjc1n6ctl0017ig5ngs6brt48","_id":"cjc1n6cu3002xig5nx2xxg5y9"},{"post_id":"cjc1n6cti0013ig5no9l2o6q0","tag_id":"cjc1n6cty002eig5nmxwskwbi","_id":"cjc1n6cu3002zig5nc1b01b3z"},{"post_id":"cjc1n6ctk0016ig5nzwvjggfe","tag_id":"cjc1n6ct0000cig5nib4xney4","_id":"cjc1n6cu40031ig5ns1zzhbqf"},{"post_id":"cjc1n6ctk0016ig5nzwvjggfe","tag_id":"cjc1n6ctl0017ig5ngs6brt48","_id":"cjc1n6cu40032ig5njxu5e0g9"},{"post_id":"cjc1n6ctk0016ig5nzwvjggfe","tag_id":"cjc1n6ctw0028ig5nkysniwum","_id":"cjc1n6cu40033ig5nyw6iw5ta"},{"post_id":"cjc1n6ctl0019ig5npwqe4spe","tag_id":"cjc1n6cu30030ig5nxnnhhpyh","_id":"cjc1n6cu40034ig5nmlv45nfl"}],"Tag":[{"name":"Hexo","_id":"cjc1n6csr0004ig5ngm3sew7p"},{"name":"C++","_id":"cjc1n6csx0008ig5nvgltkz5u"},{"name":"ACM","_id":"cjc1n6ct0000cig5nib4xney4"},{"name":"Centos","_id":"cjc1n6cte000uig5ndtnvubj6"},{"name":"Clion","_id":"cjc1n6ctg000zig5nd7crh3wa"},{"name":"开发环境","_id":"cjc1n6ctj0014ig5n4uepbm45"},{"name":"hiho","_id":"cjc1n6ctl0017ig5ngs6brt48"},{"name":"DP","_id":"cjc1n6cto001fig5nmvt8h66j"},{"name":"字符串","_id":"cjc1n6ctp001iig5n46en7fvp"},{"name":"几何","_id":"cjc1n6ctq001pig5n2w112isf"},{"name":"分治","_id":"cjc1n6ctu0022ig5nma441phu"},{"name":"贪心","_id":"cjc1n6ctw0028ig5nkysniwum"},{"name":"BFS","_id":"cjc1n6cty002eig5nmxwskwbi"},{"name":"状态压缩","_id":"cjc1n6cty002gig5nd11xv92a"},{"name":"Windows","_id":"cjc1n6cu30030ig5nxnnhhpyh"}]}}